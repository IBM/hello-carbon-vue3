{
  "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
  "name": "@carbon/web-components",
  "version": "2.8.0-rc.0",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "cds-accordion-item",
          "description": "Accordion item.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-accordion-item-beingtoggled** - The custom event fired before this accordion item is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling this accordion item.\n- **cds-accordion-item-toggled** - The custom event fired after this accordion item is toggled upon a user gesture.\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **expando** - The expando button.\n- **expando-icon** - The expando icon.\n- **title** - The title.\n- **content** - The content.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-accordion-item-beingtoggled",
              "description": "The custom event fired before this accordion item is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling this accordion item."
            },
            {
              "name": "cds-accordion-item-toggled",
              "description": "The custom event fired after this accordion item is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_currentBreakpoint",
                "description": "The current breakpoint.",
                "value": { "type": "ACCORDION_ITEM_BREAKPOINT | undefined" }
              },
              {
                "name": "_hObserveResize",
                "description": "The handle for observing resize of the parent element of this element.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggle request of this accordion item.",
                "value": {}
              },
              {
                "name": "_handleClickExpando",
                "description": "Handler for the `click` event on the expando button.",
                "value": {}
              },
              {
                "name": "_handleKeydownExpando",
                "description": "Handler for the `keydown` event on the expando button.",
                "value": {}
              },
              {
                "name": "_resizeObserver",
                "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the accordion item should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "`true` if the accordion item should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "title",
                "description": "The title text.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "_classesBreakpoints",
                "description": "The CSS classes for breakpoints.",
                "value": {}
              },
              {
                "name": "_sizesBreakpoints",
                "description": "The breakpoints.",
                "value": {}
              },
              {
                "name": "eventBeforeToggle",
                "description": "The name of the custom event fired before this accordion item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this accordion item.",
                "value": {}
              },
              {
                "name": "eventToggle",
                "description": "The name of the custom event fired after this accordion item is toggled upon a user gesture.",
                "value": {}
              },
              { "name": "selectorAccordionContent", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {},
              {
                "name": "cds-accordion-item-beingtoggled",
                "description": "The custom event fired before this accordion item is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling this accordion item."
              },
              {
                "name": "cds-accordion-item-toggled",
                "description": "The custom event fired after this accordion item is toggled upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-accordion",
          "description": "Accordion container.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "size",
                "description": "Accordion size should be sm, md, lg.",
                "value": {}
              },
              {
                "name": "alignment",
                "description": "Specify the alignment of the accordion heading title and chevron",
                "value": {}
              },
              {
                "name": "isFlush",
                "description": "Specify whether Accordion text should be flush, default is false, does not work with align=\"start\"",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "selectorAccordionItems", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-breadcrumb-item",
          "description": "Breadcrumb item.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-breadcrumb-link",
          "description": "Link in breadcrumb.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n\n\n### **CSS Parts:**\n - **link** - The link.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_linkNode",
                "value": {
                  "type": "HTMLAnchorElement | HTMLParagraphElement | undefined"
                }
              },
              {
                "name": "_classes",
                "description": "The CSS class list for the link node.",
                "value": {}
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on the `<a>`.",
                "value": {}
              },
              { "name": "_renderInner", "value": {} },
              { "name": "_renderDisabledLink", "value": {} },
              { "name": "_renderLink", "value": {} },
              {
                "name": "disabled",
                "description": "`true` if the link should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name.",
                "value": { "type": "string" }
              },
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to.",
                "value": { "type": "string" }
              },
              {
                "name": "inline",
                "description": "`true` if the link should be inline.",
                "value": { "type": "boolean" }
              },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "ping",
                "description": "URLs to ping.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Link size.",
                "value": { "type": "LINK_SIZE_TYPE" }
              },
              {
                "name": "target",
                "description": "The link target.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "MIME type of the `target`.",
                "value": { "type": "string" }
              },
              {
                "name": "visited",
                "description": "`true` if the link has been visited.",
                "value": { "type": "boolean" }
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-breadcrumb-overflow-menu",
          "description": "Overflow menu in breadcrumb.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **Slots:**\n - **icon** - The icon for the trigger button.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "icon",
              "description": "The icon for the trigger button."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_menuBody",
                "description": "The menu body.",
                "value": { "type": "CDSOverflowMenuBody | null" }
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggling of the menu.",
                "value": {}
              },
              {
                "name": "_handleClickTrigger",
                "description": "Handles `click` event on the trigger button.",
                "value": {}
              },
              {
                "name": "_handleKeydownTrigger",
                "description": "Handles `keydown` event on the trigger button.",
                "value": {}
              },
              {
                "name": "dataTable",
                "description": "`true` if this tooltip is in a data table row",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "`true` if this overflow menu should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "flipped",
                "description": "`true` if this overflow menu body should be flipped.",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "`true` if the dropdown should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "index",
                "description": "Index (starting at 1) of overflow menu item to focus on open.",
                "value": { "type": "number" }
              },
              {
                "name": "size",
                "description": "Overflow menu size.",
                "value": { "type": "string" }
              },
              {
                "name": "toolbarAction",
                "description": "`true` if this menu is a toolbar action",
                "value": { "type": "boolean" }
              },
              { "name": "triggerPosition", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "align",
                "description": "Specify how the trigger should align with the tooltip",
                "value": { "type": "string" }
              },
              {
                "name": "autoalign",
                "description": "Specify whether a auto align functionality should be applied",
                "value": { "type": "boolean" }
              },
              {
                "name": "closeOnActivation",
                "description": "Determines whether the tooltip should close when inner content is activated (click, Enter or Space)",
                "value": { "type": "boolean" }
              },
              {
                "name": "defaultOpen",
                "description": "Specify whether the tooltip should be open when it first renders",
                "value": { "type": "boolean" }
              },
              {
                "name": "enterDelayMs",
                "description": "Specify the duration in milliseconds to delay before displaying the tooltip",
                "value": { "type": "number" }
              },
              {
                "name": "leaveDelayMs",
                "description": "Specify the duration in milliseconds to delay before hiding the tooltip",
                "value": { "type": "number" }
              },
              { "name": "_renderTooltipContent", "value": {} },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-breadcrumb",
          "description": "Breadcrumb.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "noTrailingSlash",
                "description": "Optional prop to omit the trailing slash for the breadcrumbs",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-ai-skeleton-icon",
          "description": "AI skeleton icon.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "customStyles",
                "description": "Custom styles to apply to skeleton icon",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-ai-skeleton-placeholder",
          "description": "AI skeleton placeholder.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-ai-skeleton-text",
          "description": "AI skeleton text.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "heading",
                "description": "Generates skeleton text at a larger size.",
                "value": { "type": "boolean" }
              },
              {
                "name": "width",
                "description": "width (in px or %) of single line of text or max-width of paragraph lines",
                "value": { "type": "string" }
              },
              {
                "name": "paragraph",
                "description": "will generate multiple lines of text",
                "value": { "type": "boolean" }
              },
              {
                "name": "lineCount",
                "description": "the number of lines in a paragraph",
                "value": { "type": "number" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-button-set-base",
          "description": "Button set without button checks\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-button-set",
          "description": "Button set.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_handleSlotChange",
                "description": "Handler for",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "selectorItem",
                "description": "A selector that will return the child items.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-button-skeleton",
          "description": "Button skeleton.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_handleClickLinkSkeleton",
                "description": "Handles `click` event on the `<a>.",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Button size.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-button",
          "description": "Button.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Button size.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-chat-button-skeleton",
          "description": "Chat button skeleton.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "size",
                "description": "Specify the size of the `ChatButtonSkeleton`, from the following list of sizes: 'sm', 'md', 'lg'",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-checkbox",
          "description": "Check box.\n---\n\n\n### **Events:**\n - **cds-checkbox-changed** - The custom event fired after this changebox changes its checked state.\n\n### **CSS Parts:**\n - **input** - The checkbox.\n- **label** - The label.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-checkbox-changed",
              "description": "The custom event fired after this changebox changes its checked state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "ariaLabelledBy",
                "description": "fieldset `aria-labelledby`",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "Specify whether the form group is currently disabled",
                "value": {}
              },
              {
                "name": "helperText",
                "description": "Provide text for the form group for additional help",
                "value": {}
              },
              {
                "name": "invalid",
                "description": "Specify whether the form group is currently invalid",
                "value": {}
              },
              {
                "name": "invalidText",
                "description": "Provide the text that is displayed when the form group is in an invalid state",
                "value": {}
              },
              {
                "name": "legendId",
                "description": "Provide id for the fieldset <legend> which corresponds to the fieldset\n`aria-labelledby`",
                "value": {}
              },
              {
                "name": "legendText",
                "description": "Provide the text to be rendered inside of the fieldset <legend>",
                "value": {}
              },
              {
                "name": "readonly",
                "description": "Whether the CheckboxGroup should be read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "warn",
                "description": "Specify whether the form group is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the form group is in warning state",
                "value": { "type": "string" }
              },
              { "name": "_handleSlotChange", "value": {} },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorCheckbox",
                "description": "A selector that will return the checkboxes.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} }
            ],
            "events": [
              {
                "name": "cds-checkbox-changed",
                "description": "The custom event fired after this changebox changes its checked state."
              }
            ]
          }
        },
        {
          "name": "cds-checkbox",
          "description": "Check box.\n---\n\n\n### **Events:**\n - **eventChange** - undefined\n- **cds-checkbox-changed** - The custom event fired after this changebox changes its checked state.\n\n### **Methods:**\n \n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **input** - The checkbox.\n- **label** - The label.",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "eventChange" },
            {
              "name": "cds-checkbox-changed",
              "description": "The custom event fired after this changebox changes its checked state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_checkboxNode",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "_handleChange",
                "description": "Handles `click` event on the `<input>` in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleClick",
                "description": "Prevent checkbox state from updating when readonly",
                "value": {}
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "checked",
                "description": "Specify whether the underlying input should be checked",
                "value": { "type": "boolean" }
              },
              {
                "name": "dataTable",
                "description": "Specify if checkbox is being used in a data table",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Specify whether the Checkbox should be disabled",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "Provide text for the form group for additional help",
                "value": {}
              },
              {
                "name": "hideCheckbox",
                "description": "Specify whether the checkbox should be present in the DOM,\nbut invisible and uninteractable. Used for data-table purposes.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether the label should be hidden, or not",
                "value": { "type": "boolean" }
              },
              {
                "name": "indeterminate",
                "description": "Specify whether the Checkbox is in an indeterminate state",
                "value": { "type": "boolean" }
              },
              {
                "name": "labelText",
                "description": "Provide a label to provide a description of the Checkbox input that you are\nexposing to the user",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "The form name.",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Specify whether the Checkbox is read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalid",
                "description": "Specify whether the Checkbox is currently invalid",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Provide the text that is displayed when the Checkbox is in an invalid state",
                "value": {}
              },
              {
                "name": "title",
                "description": "Specify a title for the node for the Checkbox",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              {
                "name": "warn",
                "description": "Specify whether the Checkbox is in a warn state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the Checkbox is in a warn state",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired after this changebox changes its checked state.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              }
            ],
            "events": [
              { "name": "eventChange" },
              {
                "name": "cds-checkbox-changed",
                "description": "The custom event fired after this changebox changes its checked state."
              }
            ]
          }
        },
        {
          "name": "cds-combo-box-item",
          "description": "Combo box item.\n---\n\n\n### **CSS Parts:**\n - **selected-icon** - The selected icon.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "styles", "value": {} },
              {
                "name": "disabled",
                "description": "`true` if this dropdown item should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "highlighted",
                "description": "`true` if this dropdown item should be highlighted.\nIf `true`, parent `<dropdown>` selects/deselects this dropdown item upon keyboard interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "`true` if this dropdown item should be selected.",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "Dropdown size.", "value": {} },
              {
                "name": "value",
                "description": "The `value` attribute that is set to the parent `<cds-dropdown>` when this dropdown item is selected.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "id",
                "description": "Store an identifier for use in composing this item's id.\n\nAuto-increments anytime a new dropdown-item appears.",
                "value": { "type": "number" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-combo-box",
          "description": "Combo box.\n---\n\n\n### **Events:**\n - **cds-combo-box-beingselected** - The custom event fired before a combo box item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-combo-box-beingtoggled** - The custom event fired before the open state of this combo box is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.\n- **cds-combo-box-selected** - The custom event fired after a combo box item is selected upon a user gesture.\n- **cds-combo-box-toggled** - The custom event fired after the open state of this combo box is toggled upon a user gesture.\n- **invalid** - undefined\n- **eventBeforeToggle** - undefined\n- **eventToggle** - undefined\n- **cds-dropdown-beingselected** - The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-dropdown-beingtoggled** - The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.\n- **cds-dropdown-selected** - The custom event fired after a dropdown item is selected upon a user gesture.\n- **cds-dropdown-toggled** - The custom event fired after the open state of this dropdown is toggled upon a user gesture.\n\n### **Methods:**\n \n\n\n\n\n\n\n\n- **checkValidity(): __** - Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.\n- **setCustomValidity(validityMessage: _string_)** - Sets the given custom validity message.\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n\n\n\n\n\n\n\n\n### **CSS Parts:**\n - **label-text** - The label text.\n- **helper-text** - The helper text.\n- **trigger-button** - The trigger button.\n- **menu-body** - The menu body.\n- **validity-message** - The validity message.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-combo-box-beingselected",
              "description": "The custom event fired before a combo box item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-combo-box-beingtoggled",
              "description": "The custom event fired before the open state of this combo box is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
            },
            {
              "name": "cds-combo-box-selected",
              "description": "The custom event fired after a combo box item is selected upon a user gesture."
            },
            {
              "name": "cds-combo-box-toggled",
              "description": "The custom event fired after the open state of this combo box is toggled upon a user gesture."
            },
            { "name": "invalid" },
            { "name": "eventBeforeToggle" },
            { "name": "eventToggle" },
            {
              "name": "cds-dropdown-beingselected",
              "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-dropdown-beingtoggled",
              "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
            },
            {
              "name": "cds-dropdown-selected",
              "description": "The custom event fired after a dropdown item is selected upon a user gesture."
            },
            {
              "name": "cds-dropdown-toggled",
              "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_filterInputValue",
                "description": "The text content that should be set to the `<input>` for filtering.",
                "value": { "type": "string" }
              },
              {
                "name": "_shouldTriggerBeFocusable",
                "description": "`true` if the trigger button should be focusable.\nDerived class can set `false` to this if the trigger button contains another primary focusable element (e.g. `<input>`).",
                "value": { "type": "boolean" }
              },
              {
                "name": "_filterInputNode",
                "description": "The `<input>` for filtering.",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "_itemMenu",
                "description": "The menu containing all selectable items.",
                "value": { "type": "HTMLElement" }
              },
              {
                "name": "_selectionButtonNode",
                "description": "The selection button.",
                "value": { "type": "HTMLElement" }
              },
              { "name": "_testItemWithQueryText", "value": {} },
              {
                "name": "_defaultItemMatches",
                "description": "The default item matching callback.",
                "value": {}
              },
              {
                "name": "_handleInput",
                "description": "Handles `input` event on the `<input>` for filtering.",
                "value": {}
              },
              {
                "name": "_handleClickInner",
                "description": "Handles `click` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleKeypressInner",
                "description": "Handler for the `keypress` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedClearInput",
                "description": "Handles user-initiated clearing the `<input>` for filtering.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedSelectItem",
                "description": "Handles user-initiated selection of a dropdown item.",
                "value": {}
              },
              {
                "name": "_selectionDidChange",
                "description": "A callback that runs after change in dropdown selection upon user interaction is confirmed.",
                "value": {}
              },
              { "name": "_renderLabel", "value": {} },
              { "name": "_renderFollowingLabel", "value": {} },
              {
                "name": "clearSelectionLabel",
                "description": "The `aria-label` attribute for the icon to clear selection.",
                "value": { "type": "string" }
              },
              {
                "name": "inputLabel",
                "description": "The `aria-label` attribute for the `<input>` for filtering.",
                "value": { "type": "string" }
              },
              {
                "name": "itemMatches",
                "description": "The custom item matching callback.",
                "value": {
                  "type": "(item: CDSComboBoxItem, queryText: string) => boolean"
                }
              },
              { "name": "shouldUpdate", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "TRIGGER_KEYS",
                "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item.",
                "value": {}
              },
              {
                "name": "selectorItemHighlighted",
                "description": "A selector that will return highlighted items.",
                "value": {}
              },
              {
                "name": "selectorItem",
                "description": "A selector that will return combo box items.",
                "value": {}
              },
              {
                "name": "selectorItemSelected",
                "description": "A selector that will return selected items.",
                "value": {}
              },
              {
                "name": "eventBeforeToggle",
                "description": "The name of the custom event fired before this combo box item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this combo box item.",
                "value": {}
              },
              {
                "name": "eventToggle",
                "description": "The name of the custom event fired after this combo box item is toggled upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventBeforeSelect",
                "description": "The name of the custom event fired before a combo box item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
                "value": {}
              },
              {
                "name": "eventSelect",
                "description": "The name of the custom event fired after a a combo box item is selected upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              { "name": "_getValidityMessage", "value": {} },
              {
                "name": "_testValidity",
                "description": "Checks if the value meets the constraints.",
                "value": {}
              },
              {
                "name": "invalid",
                "description": "`true` to show the UI of the invalid state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "`true` if the value is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "requiredValidityMessage",
                "description": "The special validity message for `required`.",
                "value": { "type": "string" }
              },
              {
                "name": "validityMessage",
                "description": "The validity message.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              {
                "name": "checkValidity",
                "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets the given custom validity message.",
                "value": {}
              },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_activeDescendant",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "_selectedItemContent",
                "description": "The content of the selected item.",
                "value": { "type": "DocumentFragment | null" }
              },
              {
                "name": "_listBoxNode",
                "description": "The list box `<div>` node.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_slotHelperTextNode",
                "description": "The `<slot>` element for the helper text in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "_slotTitleTextNode",
                "description": "The `<slot>` element for the title text in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              { "name": "_selectionShouldChange", "value": {} },
              {
                "name": "_handleKeydownInner",
                "description": "Handler for the `keydown` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleFocusOut",
                "description": "Handles `blur` event handler on the document this element is in.",
                "value": {}
              },
              {
                "name": "_handleSlotchangeHelperText",
                "description": "Handles `slotchange` event for the `<slot>` for helper text.",
                "value": {}
              },
              {
                "name": "_handleSlotchangeLabelText",
                "description": "Handles `slotchange` event for the `<slot>` for label text.",
                "value": {}
              },
              {
                "name": "_handleSlugSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggling the open state.",
                "value": {}
              },
              {
                "name": "_clearHighlight",
                "description": "Clears the selection of dropdown items.",
                "value": {}
              },
              {
                "name": "_navigate",
                "description": "Navigate through dropdown items.",
                "value": {}
              },
              { "name": "_renderPrecedingLabel", "value": {} },
              { "name": "_renderTitleLabel", "value": {} },
              {
                "name": "ariaLabel",
                "description": "'aria-label' of the ListBox component.\nSpecify a label to be read by screen readers on the container node",
                "value": { "type": "string" }
              },
              {
                "name": "direction",
                "description": "Specify the direction of the dropdown. Can be either top or bottom.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if this dropdown should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether the title text should be hidden or not",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "titleText",
                "description": "Provide the title text that will be read by a screen reader when visiting this control",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "Name for the dropdown in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "open",
                "description": "`true` if this dropdown should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readOnly",
                "description": "Whether or not the Dropdown is readonly",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "Dropdown size.", "value": {} },
              {
                "name": "toggleLabelClosed",
                "description": "The `aria-label` attribute for the UI indicating the closed state.",
                "value": { "type": "string" }
              },
              {
                "name": "toggleLabelOpen",
                "description": "The `aria-label` attribute for the UI indicating the open state.",
                "value": { "type": "string" }
              },
              {
                "name": "label",
                "description": "Generic label that will be used as the textual representation of what this field is for",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "`true` if this dropdown should use the inline UI variant.",
                "value": {}
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              {
                "name": "_classes",
                "description": "The CSS class list for dropdown listbox",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "getAction", "value": {} }
            ],
            "events": [
              {
                "name": "cds-combo-box-beingselected",
                "description": "The custom event fired before a combo box item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-combo-box-beingtoggled",
                "description": "The custom event fired before the open state of this combo box is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
              },
              {
                "name": "cds-combo-box-selected",
                "description": "The custom event fired after a combo box item is selected upon a user gesture."
              },
              {
                "name": "cds-combo-box-toggled",
                "description": "The custom event fired after the open state of this combo box is toggled upon a user gesture."
              },
              { "name": "invalid" },
              { "name": "eventBeforeToggle" },
              { "name": "eventToggle" },
              {
                "name": "cds-dropdown-beingselected",
                "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-dropdown-beingtoggled",
                "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
              },
              {
                "name": "cds-dropdown-selected",
                "description": "The custom event fired after a dropdown item is selected upon a user gesture."
              },
              {
                "name": "cds-dropdown-toggled",
                "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-code-snippet",
          "description": "Basic code snippet.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_expandedCode",
                "description": "`true` to expand multi-line variant of code snippet.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_hObserveResize",
                "description": "The handle for observing resize of the parent element of this element.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_rowHeightInPixels",
                "description": "Row height in pixels",
                "value": { "type": "number" }
              },
              {
                "name": "_hasRightOverflow",
                "description": "`true` if code-snippet has right overflow",
                "value": { "type": "boolean" }
              },
              {
                "name": "_hasLeftOverflow",
                "description": "`true` if code-snippet has left overflow",
                "value": { "type": "boolean" }
              },
              {
                "name": "_shouldShowMoreLessBtn",
                "description": "`true` if show more or show less btn is visible",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleCopyClick",
                "description": "Handles `click` event on the copy button.",
                "value": {}
              },
              { "name": "_getCodeRefDimensions", "value": {} },
              {
                "name": "_handleScroll",
                "description": "Handles `scroll` event.",
                "value": {}
              },
              {
                "name": "_handleClickExpanded",
                "description": "Handles `click` event on the show more or show less button.",
                "value": {}
              },
              {
                "name": "_resizeObserver",
                "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position.",
                "value": {}
              },
              {
                "name": "copyText",
                "description": "Optional text to copy. If not specified, the `children` node's `innerText`\nwill be used as the copy value.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "feedback",
                "description": "Specify the string displayed when the snippet is copied",
                "value": { "type": "string" }
              },
              {
                "name": "feedbackTimeout",
                "description": "Specify the time it takes for the feedback message to timeout",
                "value": { "type": "number" }
              },
              {
                "name": "hideCopyButton",
                "description": "Specify whether or not a copy button should be used/rendered.",
                "value": { "type": "boolean" }
              },
              {
                "name": "maxCollapsedNumberOfRows",
                "description": "Specify the maximum number of rows to be shown when in collapsed view",
                "value": { "type": "number" }
              },
              {
                "name": "maxExpandedNumberOfRows",
                "description": "Specify the maximum number of rows to be shown when in expanded view",
                "value": { "type": "number" }
              },
              {
                "name": "minCollapsedNumberOfRows",
                "description": "Specify the minimum number of rows to be shown when in collapsed view",
                "value": { "type": "number" }
              },
              {
                "name": "minExpandedNumberOfRows",
                "description": "Specify the minimum number of rows to be shown when in expanded view",
                "value": { "type": "number" }
              },
              {
                "name": "showLessText",
                "description": "Specify a string that is displayed when the Code Snippet has been\ninteracted with to show less lines",
                "value": { "type": "string" }
              },
              {
                "name": "showMoreText",
                "description": "Specify a string that is displayed when the Code Snippet text is more\nthan 15 lines",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipContent",
                "description": "Tooltip content for the copy button.",
                "value": { "type": "string" }
              },
              {
                "name": "wrapText",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "type",
                "description": "The type of code snippet.",
                "value": {}
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-content-switcher-item",
          "description": "Content switcher button.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "`true` if this content switcher item should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hideDivider",
                "description": "`true` to hide the divider at the left.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "`true` if the content switcher button should be selected.",
                "value": { "type": "boolean" }
              },
              {
                "name": "target",
                "description": "The element ID of target panel.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The `value` attribute that is set to the parent `<cds-content-switcher>`\nwhen this content switcher item is selected.",
                "value": { "type": "string" }
              },
              {
                "name": "icon",
                "description": "`true` if the content switcher button should be icon-only.",
                "value": { "type": "boolean" }
              },
              {
                "name": "align",
                "description": "Specify how the trigger should align with the tooltip for icon-only\nswitcher item",
                "value": { "type": "string" }
              },
              {
                "name": "closeOnActivation",
                "description": "Determines whether the tooltip should close when inner content is\nactivated (click, Enter or Space)",
                "value": { "type": "boolean" }
              },
              {
                "name": "enterDelayMs",
                "description": "Specify the duration in milliseconds to delay before displaying the\ntooltip for icon-only switcher item",
                "value": { "type": "number" }
              },
              {
                "name": "leaveDelayMs",
                "description": "Specify the duration in milliseconds to delay before hiding the tooltip\nfor icon-only switcher-item\n\nTODO: match upstream value once #10471 is resolved",
                "value": { "type": "number" }
              },
              { "name": "updated", "value": {} },
              { "name": "_renderTooltipContent", "value": {} },
              { "name": "shouldUpdate", "value": {} },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-content-switcher",
          "description": "Content switcher.\n---\n\n\n### **Events:**\n - **cds-content-switcher-beingselected** - The custom event fired before a content switcher item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-content-switcher-selected** - The custom event fired after a a content switcher item is selected upon a user gesture.\n\n### **Methods:**\n \n\n\n\n",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-content-switcher-beingselected",
              "description": "The custom event fired before a content switcher item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-content-switcher-selected",
              "description": "The custom event fired after a a content switcher item is selected upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_handleHover",
                "description": "Handles `mouseover`/`mouseout` events on `<slot>`.",
                "value": {}
              },
              { "name": "_getCurrentItem", "value": {} },
              { "name": "_getNextItem", "value": {} },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on content switcher item.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedSelectItem",
                "description": "Handles user-initiated selection of a content switcher item.",
                "value": {}
              },
              {
                "name": "_navigate",
                "description": "Navigates through content switcher items.",
                "value": {}
              },
              {
                "name": "_selectionDidChange",
                "description": "A callback that runs after change in content switcher selection upon user interaction is confirmed.",
                "value": {}
              },
              {
                "name": "value",
                "description": "The value of the selected item.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Content switcher size.",
                "value": {}
              },
              {
                "name": "iconOnly",
                "description": "Icon only.",
                "value": { "type": "boolean" }
              },
              { "name": "shouldUpdate", "value": {} },
              { "name": "_handleSlotchange", "value": {} },
              {
                "name": "selectorItem",
                "description": "A selector that will return content switcher items.",
                "value": {}
              },
              {
                "name": "selectorIconItem",
                "description": "A selector that will return content switcher icon items.",
                "value": {}
              },
              {
                "name": "selectorItemEnabled",
                "description": "A selector that will return enabled content switcher items.",
                "value": {}
              },
              {
                "name": "selectorItemSelected",
                "description": "A selector that will return selected items.",
                "value": {}
              },
              {
                "name": "eventBeforeSelect",
                "description": "The name of the custom event fired before a content switcher item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
                "value": {}
              },
              {
                "name": "eventSelect",
                "description": "The name of the custom event fired after a a content switcher item is selected upon a user gesture.",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": [
              {
                "name": "cds-content-switcher-beingselected",
                "description": "The custom event fired before a content switcher item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-content-switcher-selected",
                "description": "The custom event fired after a a content switcher item is selected upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-copy",
          "description": "Copy.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_showFeedback",
                "description": "`true` to show the feedback tooltip.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_animation",
                "description": "`true` to show the feedback tooltip.",
                "value": { "type": "string" }
              },
              { "name": "_createHandleFeedbackTooltip", "value": {} },
              {
                "name": "_handleFeedbackTooltip",
                "description": "Handles showing/hiding the feedback tooltip.",
                "value": {}
              },
              {
                "name": "_handleClickButton",
                "description": "Handles `click` event on the copy button.",
                "value": {}
              },
              {
                "name": "feedback",
                "description": "Specify the string that is displayed when the button is clicked and the content is copi",
                "value": { "type": "string" }
              },
              {
                "name": "feedbackTimeout",
                "description": "The number in milliseconds to determine how long the tooltip should remain.",
                "value": { "type": "number" }
              },
              { "name": "_renderTooltipContent", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "align",
                "description": "Specify how the trigger should align with the tooltip",
                "value": { "type": "string" }
              },
              {
                "name": "autoalign",
                "description": "Specify whether a auto align functionality should be applied",
                "value": { "type": "boolean" }
              },
              {
                "name": "closeOnActivation",
                "description": "Determines whether the tooltip should close when inner content is activated (click, Enter or Space)",
                "value": { "type": "boolean" }
              },
              {
                "name": "defaultOpen",
                "description": "Specify whether the tooltip should be open when it first renders",
                "value": { "type": "boolean" }
              },
              {
                "name": "enterDelayMs",
                "description": "Specify the duration in milliseconds to delay before displaying the tooltip",
                "value": { "type": "number" }
              },
              {
                "name": "leaveDelayMs",
                "description": "Specify the duration in milliseconds to delay before hiding the tooltip",
                "value": { "type": "number" }
              },
              {
                "name": "size",
                "description": "Specify the size of the Button. Defaults to `md`.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-copy-button",
          "description": "Copy button.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "feedback",
                "description": "Specify the string that is displayed when the button is clicked and the content is copi",
                "value": { "type": "string" }
              },
              {
                "name": "feedbackTimeout",
                "description": "The number in milliseconds to determine how long the tooltip should remain.",
                "value": { "type": "number" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-date-picker-input",
          "description": "The input box for date picker.\n---\n\n\n### **Methods:**\n \n\n- **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlugSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_iconNode",
                "description": "The calendar icon.",
                "value": { "type": "SVGElement" }
              },
              {
                "name": "_handleClickWrapper",
                "description": "Handles `click` event on the calendar icon.",
                "value": {}
              },
              {
                "name": "_handleInput",
                "description": "Handles `input` event on `<input>` in the shadow DOM.",
                "value": {}
              },
              { "name": "_renderIcon", "value": {} },
              {
                "name": "_hasHelperText",
                "description": "`true` if there is helper text content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event on the default `<slot>`.",
                "value": {}
              },
              {
                "name": "input",
                "description": "The `<input>`, used for Flatpickr to grab.",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "colorScheme",
                "description": "The color scheme.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the check box should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hideLabel",
                "description": "`true` if the label should be hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "invalid",
                "description": "Controls the invalid state and visibility of the `validityMessage`.",
                "value": { "type": "boolean" }
              },
              {
                "name": "kind",
                "description": "Date picker input kind.",
                "value": {}
              },
              {
                "name": "labelText",
                "description": "The label text.",
                "value": { "type": "string" }
              },
              {
                "name": "pattern",
                "description": "The `pattern` attribute for the `<input>` in the shadow DOM.",
                "value": { "type": "string" }
              },
              {
                "name": "placeholder",
                "description": "The placeholder text.",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Specify if the component should be read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "`true` if the value is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "size",
                "description": "Vertical size of this date picker input.",
                "value": {}
              },
              {
                "name": "short",
                "description": "true to use the short version.",
                "value": { "type": "boolean" }
              },
              {
                "name": "type",
                "description": "The `type` attribute for the `<input>` in the shadow DOM.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "defaultPattern",
                "description": "The default value for `pattern` property.",
                "value": { "type": "string" }
              },
              {
                "name": "defaultType",
                "description": "The default value for `type` property.",
                "value": { "type": "string" }
              },
              {
                "name": "selectorParent",
                "description": "A selector that will return the parent date picker.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-date-picker",
          "description": "Date picker.\n---\n\n\n### **Events:**\n - **cds-date-picker-changed** - The custom event fired on this element when Flatpickr updates its value.\n- **cds-date-picker-flatpickr-error** - The name of the custom event when Flatpickr throws an error.\n\n### **Methods:**\n - **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-date-picker-changed",
              "description": "The custom event fired on this element when Flatpickr updates its value."
            },
            {
              "name": "cds-date-picker-flatpickr-error",
              "description": "The name of the custom event when Flatpickr throws an error."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_dateInteractNode",
                "description": "The slotted `<cds-date-input kind=\"from\">`.",
                "value": { "type": "CDSDatePickerInput | null" }
              },
              {
                "name": "_floatingMenuContainerNode",
                "description": "The element to put calendar dropdown in.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_value",
                "description": "The internal placeholder for the `value` property.",
                "value": { "type": "string" }
              },
              { "name": "_mode", "value": {} },
              {
                "name": "_datePickerPlugins",
                "value": { "type": "FlatpickrPlugin[]" }
              },
              {
                "name": "_datePickerOptions",
                "value": { "type": "FlatpickrOptions" }
              },
              {
                "name": "_handleChange",
                "description": "Handles `${prefix}-date-picker-changed` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event in the `<slot>`.",
                "value": {}
              },
              {
                "name": "_handleFlatpickrError",
                "description": "Fires a custom event to notify an error in Flatpickr.",
                "value": {}
              },
              {
                "name": "_instantiateDatePicker",
                "description": "Instantiates Flatpickr.",
                "value": {}
              },
              {
                "name": "_releaseDatePicker",
                "description": "Releases Flatpickr instances.",
                "value": {}
              },
              {
                "name": "calendar",
                "description": "The Flatpickr instance.",
                "value": { "type": "FlatpickrInstance | null" }
              },
              {
                "name": "allowInput",
                "description": "flatpickr prop passthrough. Allows the user to enter a date directly into the input field",
                "value": { "type": "boolean" }
              },
              {
                "name": "closeOnSelect",
                "description": "flatpickr prop passthrough. Controls whether the calendar dropdown closes upon selection.",
                "value": { "type": "boolean" }
              },
              {
                "name": "dateFormat",
                "description": "The date format to let Flatpickr use.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "Controls the disabled state of the input",
                "value": { "type": "boolean" }
              },
              {
                "name": "locale",
                "description": "The localization data.",
                "value": { "type": "FlatpickrLocale" }
              },
              {
                "name": "enabledRange",
                "description": "The date range that a user can pick in calendar dropdown.",
                "value": { "type": "string" }
              },
              {
                "name": "minDate",
                "description": "The minimum date that a user can start picking from.",
                "value": { "type": "string" }
              },
              {
                "name": "maxDate",
                "description": "The maximum date that a user can start picking from.",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "Name for the input in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "open",
                "description": "`true` if the date picker should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Specify if the component should be read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "value",
                "description": "The date(s) in ISO8601 format (date portion only), for range mode, '/' is used for separate start/end dates.",
                "value": {}
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "_selectorFlatpickrMonthYearContainer",
                "description": "The CSS selector for Flatpickr's month/year portion.",
                "value": { "type": "string" }
              },
              {
                "name": "_selectorFlatpickrYearContainer",
                "description": "The CSS selector for Flatpickr's year portion.",
                "value": { "type": "string" }
              },
              {
                "name": "_selectorFlatpickrCurrentMonth",
                "description": "The CSS selector for the inner element of Flatpickr's month portion.",
                "value": { "type": "string" }
              },
              {
                "name": "_selectorFlatpickrMonth",
                "description": "The CSS selector for Flatpickr's month navigator.",
                "value": { "type": "string" }
              },
              {
                "name": "_selectorFlatpickrWeekdays",
                "description": "The CSS selector for Flatpickr's container of the weekdays.",
                "value": { "type": "string" }
              },
              {
                "name": "_selectorFlatpickrDays",
                "description": "The CSS selector for Flatpickr's container of the days.",
                "value": { "type": "string" }
              },
              {
                "name": "_selectorFlatpickrWeekday",
                "description": "The CSS selector applied to Flatpickr's each weekdays.",
                "value": { "type": "string" }
              },
              {
                "name": "_selectorFlatpickrDay",
                "description": "The CSS selector applied to Flatpickr's each days.",
                "value": { "type": "string" }
              },
              {
                "name": "_classFlatpickrCurrentMonth",
                "description": "The CSS class for the inner element of Flatpickr's month portion.",
                "value": { "type": "string" }
              },
              {
                "name": "_classFlatpickrToday",
                "description": "The CSS class applied to Flatpickr's \"today\" highlight.",
                "value": { "type": "string" }
              },
              {
                "name": "classCalendarContainer",
                "description": "The CSS class for the calendar dropdown.",
                "value": {}
              },
              {
                "name": "classMonth",
                "description": "The CSS class for the month navigator.",
                "value": {}
              },
              {
                "name": "classWeekdays",
                "description": "The CSS class for the container of the weekdays.",
                "value": {}
              },
              {
                "name": "classDays",
                "description": "The CSS class for the container of the days.",
                "value": {}
              },
              {
                "name": "classWeekday",
                "description": "The CSS class applied to each weekdays.",
                "value": {}
              },
              {
                "name": "classDay",
                "description": "The CSS class applied to each days.",
                "value": {}
              },
              {
                "name": "classNoBorder",
                "description": "The CSS class applied to the \"today\" highlight if there are any dates selected.",
                "value": { "type": "string" }
              },
              {
                "name": "defaultDateFormat",
                "description": "The default date format.",
                "value": { "type": "string" }
              },
              {
                "name": "defaultLocale",
                "description": "The default localization data.",
                "value": {}
              },
              {
                "name": "selectorInputFrom",
                "description": "A selector that will return the `<input>` to enter starting date.",
                "value": {}
              },
              {
                "name": "selectorInputTo",
                "description": "A selector that will return the `<input>` to enter end date.",
                "value": {}
              },
              {
                "name": "eventFlatpickrError",
                "description": "The name of the custom event when Flatpickr throws an error.",
                "value": {}
              },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired on this element when Flatpickr updates its value.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              }
            ],
            "events": [
              {
                "name": "cds-date-picker-changed",
                "description": "The custom event fired on this element when Flatpickr updates its value."
              },
              {
                "name": "cds-date-picker-flatpickr-error",
                "description": "The name of the custom event when Flatpickr throws an error."
              }
            ]
          }
        },
        {
          "name": "cds-table-batch-actions",
          "description": "Table batch actions.\n---\n\n\n### **Events:**\n - **eventClickCancel** - undefined\n- **cds-table-batch-actions-cancel-clicked** - The custom event fired after the Cancel button is clicked.",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "eventClickCancel" },
            {
              "name": "cds-table-batch-actions-cancel-clicked",
              "description": "The custom event fired after the Cancel button is clicked."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_handleCancel",
                "description": "Handles `click` event on the Cancel button.",
                "value": {}
              },
              {
                "name": "active",
                "description": "`true` if this batch actions bar should be active.",
                "value": { "type": "boolean" }
              },
              {
                "name": "formatSelectedItemsCount",
                "description": "The formatter for selected items. Should be changed upon the locale the UI is rendered with.",
                "value": {}
              },
              {
                "name": "selectedRowsCount",
                "description": "Numeric representation of the total number of items selected in a table.\nThis number is used to derive the selection message.",
                "value": { "type": "number" }
              },
              { "name": "firstUpdated", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorButtons",
                "description": "The CSS selector to find the action buttons.",
                "value": {}
              },
              {
                "name": "eventClickCancel",
                "description": "The name of the custom event fired after the Cancel button is clicked.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": [
              { "name": "eventClickCancel" },
              {
                "name": "cds-table-batch-actions-cancel-clicked",
                "description": "The custom event fired after the Cancel button is clicked."
              }
            ]
          }
        },
        {
          "name": "cds-table-body",
          "description": "Data table body.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_slotNode",
                "description": "The `<slot>` element in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "_updateZebra",
                "description": "Updates `even`/`odd` properties of the child `<cds-table-row>`s.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event in the `<slot>` element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "useZebraStyles",
                "description": "The color scheme.",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-cell-content",
          "description": "Data table cell content.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-cell",
          "description": "Data table cell.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "overflowMenuOnHover",
                "description": "Specify whether the overflow menu (if it exists) should be shown always, or only on hover",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "The table size.", "value": {} },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-expanded-row",
          "description": "Table row of collapsible details.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_handleMouseOverOut",
                "description": "Handles `mouseover`/`mouseout` event handler on this element.",
                "value": {}
              },
              {
                "name": "colSpan",
                "description": "The colspan.",
                "value": { "type": "number" }
              },
              {
                "name": "expanded",
                "description": "`true` if the table row should be expanded.",
                "value": { "type": "boolean" }
              },
              {
                "name": "filtered",
                "description": "`true` if the table row should be filtered.",
                "value": { "type": "boolean" }
              },
              {
                "name": "highlighted",
                "description": "`true` if the table row should be highlighted.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "`true` if the previous table row has been selected",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "selectorRow",
                "description": "A selector that will return the previous sibling row.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-head",
          "description": "Data table header.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-header-cell",
          "description": "Data table header cell.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-table-header-cell-sort** - The custom event fired before a new sort direction is set upon a user gesture. Cancellation of this event stops the user-initiated change in sort direction.\n\n### **Methods:**\n \n- **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-table-header-cell-sort",
              "description": "The custom event fired before a new sort direction is set upon a user gesture. Cancellation of this event stops the user-initiated change in sort direction."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_handleClickSortButton",
                "description": "Handles `click` event on the sort button.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_handleSlugSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_getNextSort", "value": {} },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isExpandable",
                "description": "`true` if the table has expandable rows",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelectable",
                "description": "`true` if this table has selectable rows",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSortable",
                "description": "`true` if this table header column should be sortable",
                "value": { "type": "boolean" }
              },
              {
                "name": "sortActive",
                "description": "`true` if this table header cell is of a primary sorting column.",
                "value": { "type": "boolean" }
              },
              {
                "name": "sortCycle",
                "description": "The table sort cycle in use.",
                "value": { "type": "TABLE_SORT_CYCLE | undefined" }
              },
              {
                "name": "sortDirection",
                "description": "The table sort direction.\nIf present, this table header cell will have a sorting UI. Choose between `ascending` or `descending`.",
                "value": { "type": "TABLE_SORT_DIRECTION | undefined" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              {
                "name": "eventBeforeSort",
                "description": "The name of the custom event fired before a new sort direction is set upon a user gesture.\nCancellation of this event stops the user-initiated change in sort direction.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "TABLE_SORT_CYCLES",
                "description": "Mapping of table sort cycles to table sort states.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {},
              {
                "name": "cds-table-header-cell-sort",
                "description": "The custom event fired before a new sort direction is set upon a user gesture. Cancellation of this event stops the user-initiated change in sort direction."
              }
            ]
          }
        },
        {
          "name": "cds-table-header-description",
          "description": "Data table header description\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-header-row",
          "description": "Data table header row.\n---\n\n\n### **Events:**\n - **cds-table-change-selection-all** - The name of the custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection.\n- **undefined** - undefined\n- **cds-table-row-change-selection** - The custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection.\n- **cds-radio-button-changed** - The name of the custom event fired after this radio button changes its checked state.\n- **cds-checkbox-changed** - The name of the custom event fired after this checkbox changes its checked state.\n- **cds-table-row-expando-beingtoggled** - The name of the custom event fired before the expanded state of this row is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling the expanded state.\n- **cds-table-row-expando-toggled** - The name of the custom event fired after the expanded state of this row is toggled upon a user gesture.\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n- **_handleUserInitiatedToggleExpando(expanded)** - Handles user-initiated toggle request of the expando button in this table row.\n\n\n### **CSS Parts:**\n - **selection-container** - The container of the checkbox.\n- **selection** - The checkbox.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-table-change-selection-all",
              "description": "The name of the custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection."
            },
            {},
            {
              "name": "cds-table-row-change-selection",
              "description": "The custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection."
            },
            {
              "name": "cds-radio-button-changed",
              "description": "The name of the custom event fired after this radio button changes its checked state."
            },
            {
              "name": "cds-checkbox-changed",
              "description": "The name of the custom event fired after this checkbox changes its checked state."
            },
            {
              "name": "cds-table-row-expando-beingtoggled",
              "description": "The name of the custom event fired before the expanded state of this row is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling the expanded state."
            },
            {
              "name": "cds-table-row-expando-toggled",
              "description": "The name of the custom event fired after the expanded state of this row is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "eventBeforeChangeSelection",
                "description": "The name of the custom event fired before this row is selected/unselected upon a user gesture.\nCancellation of this event stops the user-initiated change in selection.",
                "value": {}
              },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleClickSelectionRadio",
                "description": "Handles `click` event on the radio button.",
                "value": {}
              },
              {
                "name": "_handleClickSelectionCheckbox",
                "description": "Handles `click` event on the check box.",
                "value": {}
              },
              {
                "name": "_handleClickExpando",
                "description": "Handles `click` event on the expando button.",
                "value": {}
              },
              {
                "name": "_handleMouseOverOut",
                "description": "Handles `mouseover`/`mouseout` event handler on this element.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedToggleExpando",
                "description": "Handles user-initiated toggle request of the expando button in this table row.",
                "value": {}
              },
              { "name": "_renderExpandButton", "value": {} },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_renderFirstCells", "value": {} },
              {
                "name": "batchExpansion",
                "description": "`true` if this table should support batch expansion",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "`true` if this table row should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "even",
                "description": "`true` if this table row is placed at an even position in parent `<cds-table-body>`.\n`<cds-table-body>` sets this property, _only_ in zebra stripe mode.",
                "value": { "type": "boolean" }
              },
              {
                "name": "expandable",
                "description": "`true` if this table row can be expanded to show content underneath",
                "value": { "type": "boolean" }
              },
              {
                "name": "expanded",
                "description": "`true` when the table row expanded is showing",
                "value": { "type": "boolean" }
              },
              {
                "name": "filtered",
                "description": "`true` if this table row should be filtered out.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hideCheckbox",
                "description": "Specify whether the checkbox should be present in the DOM,\nbut invisible and uninteractable.",
                "value": { "type": "boolean" }
              },
              {
                "name": "highlighted",
                "description": "`true` if the table row should be highlighted.",
                "value": { "type": "boolean" }
              },
              {
                "name": "odd",
                "description": "`true` if this table row is placed at an odd position in parent `<cds-table-body>`.\n`<cds-table-body>` sets this property, _only_ in zebra stripe mode.",
                "value": { "type": "boolean" }
              },
              {
                "name": "overflowMenuOnHover",
                "description": "Specify whether the overflow menu (if it exists) should be shown always, or only on hover",
                "value": { "type": "boolean" }
              },
              {
                "name": "radio",
                "description": "Specify whether the control should be a radio button or inline checkbox",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "`true` if this table row should be selected.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selectionLabel",
                "description": "The `aria-label` attribute for the `<label>` for selection.",
                "value": { "type": "string" }
              },
              {
                "name": "selectionName",
                "description": "The `name` attribute for the `<input>` for selection.\nIf present, this table row will be a selectable one.",
                "value": { "type": "string" }
              },
              {
                "name": "selectionValue",
                "description": "The `value` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "eventRadioChange",
                "description": "The name of the custom event fired after this radio button changes its checked state.",
                "value": {}
              },
              {
                "name": "eventCheckboxChange",
                "description": "The name of the custom event fired after this radio button changes its checked state.",
                "value": {}
              },
              {
                "name": "selectorTable",
                "description": "A selector that will return the parent table",
                "value": {}
              },
              {
                "name": "selectorTableCellOverflowMenu",
                "description": "The CSS selector to find the overflow menu on the table cell",
                "value": {}
              },
              {
                "name": "selectorExpandedRow",
                "description": "A selector that will return the corresponding expanded row.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              {
                "name": "eventBeforeExpandoToggle",
                "description": "The name of the custom event fired before the expanded state this row is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling the expanded state.",
                "value": {}
              },
              {
                "name": "eventExpandoToggle",
                "description": "The name of the custom event fired after the expanded state this row is toggled upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": [
              {
                "name": "cds-table-change-selection-all",
                "description": "The name of the custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection."
              },
              {},
              {
                "name": "cds-table-row-change-selection",
                "description": "The custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection."
              },
              {
                "name": "cds-radio-button-changed",
                "description": "The name of the custom event fired after this radio button changes its checked state."
              },
              {
                "name": "cds-checkbox-changed",
                "description": "The name of the custom event fired after this checkbox changes its checked state."
              },
              {
                "name": "cds-table-row-expando-beingtoggled",
                "description": "The name of the custom event fired before the expanded state of this row is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling the expanded state."
              },
              {
                "name": "cds-table-row-expando-toggled",
                "description": "The name of the custom event fired after the expanded state of this row is toggled upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-table-header-title",
          "description": "Data table header title\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-row",
          "description": "Data table row.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-table-row-change-selection** - The custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection.\n- **cds-radio-button-changed** - The name of the custom event fired after this radio button changes its checked state.\n- **cds-checkbox-changed** - The name of the custom event fired after this checkbox changes its checked state.\n- **cds-table-row-expando-beingtoggled** - The name of the custom event fired before the expanded state of this row is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling the expanded state.\n- **cds-table-row-expando-toggled** - The name of the custom event fired after the expanded state of this row is toggled upon a user gesture.\n\n### **Methods:**\n - **_handleUserInitiatedToggleExpando(expanded)** - Handles user-initiated toggle request of the expando button in this table row.\n\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **selection-container** - The container of the checkbox.\n- **selection** - The checkbox.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-table-row-change-selection",
              "description": "The custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection."
            },
            {
              "name": "cds-radio-button-changed",
              "description": "The name of the custom event fired after this radio button changes its checked state."
            },
            {
              "name": "cds-checkbox-changed",
              "description": "The name of the custom event fired after this checkbox changes its checked state."
            },
            {
              "name": "cds-table-row-expando-beingtoggled",
              "description": "The name of the custom event fired before the expanded state of this row is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling the expanded state."
            },
            {
              "name": "cds-table-row-expando-toggled",
              "description": "The name of the custom event fired after the expanded state of this row is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleClickSelectionRadio",
                "description": "Handles `click` event on the radio button.",
                "value": {}
              },
              {
                "name": "_handleClickSelectionCheckbox",
                "description": "Handles `click` event on the check box.",
                "value": {}
              },
              {
                "name": "_handleClickExpando",
                "description": "Handles `click` event on the expando button.",
                "value": {}
              },
              {
                "name": "_handleMouseOverOut",
                "description": "Handles `mouseover`/`mouseout` event handler on this element.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedToggleExpando",
                "description": "Handles user-initiated toggle request of the expando button in this table row.",
                "value": {}
              },
              { "name": "_renderExpandButton", "value": {} },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_renderFirstCells", "value": {} },
              {
                "name": "batchExpansion",
                "description": "`true` if this table should support batch expansion",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "`true` if this table row should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "even",
                "description": "`true` if this table row is placed at an even position in parent `<cds-table-body>`.\n`<cds-table-body>` sets this property, _only_ in zebra stripe mode.",
                "value": { "type": "boolean" }
              },
              {
                "name": "expandable",
                "description": "`true` if this table row can be expanded to show content underneath",
                "value": { "type": "boolean" }
              },
              {
                "name": "expanded",
                "description": "`true` when the table row expanded is showing",
                "value": { "type": "boolean" }
              },
              {
                "name": "filtered",
                "description": "`true` if this table row should be filtered out.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hideCheckbox",
                "description": "Specify whether the checkbox should be present in the DOM,\nbut invisible and uninteractable.",
                "value": { "type": "boolean" }
              },
              {
                "name": "highlighted",
                "description": "`true` if the table row should be highlighted.",
                "value": { "type": "boolean" }
              },
              {
                "name": "odd",
                "description": "`true` if this table row is placed at an odd position in parent `<cds-table-body>`.\n`<cds-table-body>` sets this property, _only_ in zebra stripe mode.",
                "value": { "type": "boolean" }
              },
              {
                "name": "overflowMenuOnHover",
                "description": "Specify whether the overflow menu (if it exists) should be shown always, or only on hover",
                "value": { "type": "boolean" }
              },
              {
                "name": "radio",
                "description": "Specify whether the control should be a radio button or inline checkbox",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "`true` if this table row should be selected.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selectionLabel",
                "description": "The `aria-label` attribute for the `<label>` for selection.",
                "value": { "type": "string" }
              },
              {
                "name": "selectionName",
                "description": "The `name` attribute for the `<input>` for selection.\nIf present, this table row will be a selectable one.",
                "value": { "type": "string" }
              },
              {
                "name": "selectionValue",
                "description": "The `value` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "eventRadioChange",
                "description": "The name of the custom event fired after this radio button changes its checked state.",
                "value": {}
              },
              {
                "name": "eventCheckboxChange",
                "description": "The name of the custom event fired after this radio button changes its checked state.",
                "value": {}
              },
              {
                "name": "eventBeforeChangeSelection",
                "description": "The name of the custom event fired before this row is selected/unselected upon a user gesture.\nCancellation of this event stops the user-initiated change in selection.",
                "value": {}
              },
              {
                "name": "selectorTable",
                "description": "A selector that will return the parent table",
                "value": {}
              },
              {
                "name": "selectorTableCellOverflowMenu",
                "description": "The CSS selector to find the overflow menu on the table cell",
                "value": {}
              },
              {
                "name": "selectorExpandedRow",
                "description": "A selector that will return the corresponding expanded row.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              {
                "name": "eventBeforeExpandoToggle",
                "description": "The name of the custom event fired before the expanded state this row is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling the expanded state.",
                "value": {}
              },
              {
                "name": "eventExpandoToggle",
                "description": "The name of the custom event fired after the expanded state this row is toggled upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {},
              {
                "name": "cds-table-row-change-selection",
                "description": "The custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection."
              },
              {
                "name": "cds-radio-button-changed",
                "description": "The name of the custom event fired after this radio button changes its checked state."
              },
              {
                "name": "cds-checkbox-changed",
                "description": "The name of the custom event fired after this checkbox changes its checked state."
              },
              {
                "name": "cds-table-row-expando-beingtoggled",
                "description": "The name of the custom event fired before the expanded state of this row is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling the expanded state."
              },
              {
                "name": "cds-table-row-expando-toggled",
                "description": "The name of the custom event fired after the expanded state of this row is toggled upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-table-skeleton",
          "description": "Data table skeleton\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "headers",
                "description": "Optionally specify the displayed headers",
                "value": { "type": "string[]" }
              },
              {
                "name": "compact",
                "description": "Optionally specify whether you want the Skeleton to be rendered as a compact DataTable",
                "value": { "type": "boolean" }
              },
              {
                "name": "columnCount",
                "description": "Specify the number of columns that you want to render in the skeleton state",
                "value": { "type": "number" }
              },
              {
                "name": "rowCount",
                "description": "Specify the number of rows that you want to render in the skeleton state",
                "value": { "type": "number" }
              },
              {
                "name": "showHeader",
                "description": "Specify if the table header should be rendered as part of the skeleton.",
                "value": { "type": "boolean" }
              },
              {
                "name": "showToolbar",
                "description": "Specify if the table toolbar should be rendered as part of the skeleton.",
                "value": { "type": "boolean" }
              },
              {
                "name": "zebra",
                "description": "true to add useZebraStyles striping.",
                "value": { "type": "boolean" }
              },
              { "name": "_renderHeader", "value": {} },
              { "name": "_renderToolbar", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-toolbar-content",
          "description": "Table toolbar content.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "hasBatchActions",
                "description": "`true` if this batch actions bar is active.",
                "value": { "type": "boolean" }
              },
              {
                "name": "size",
                "description": "Table toolbar contents size",
                "value": {}
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table-toolbar-search",
          "description": "Table toolbar search.\n---\n\n\n### **Events:**\n - **cds-search-input** - The custom event fired after the search content is changed upon a user gesture.\n- **undefined** - undefined\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n\n### **CSS Parts:**\n - **search-icon** - The search icon.\n- **label-text** - The label text.\n- **input** - The input box.\n- **close-button** - The close button.\n- **close-icon** - The close icon.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-search-input",
              "description": "The custom event fired after the search content is changed upon a user gesture."
            },
            {}
          ],
          "js": {
            "properties": [
              { "name": "_inputNode", "value": { "type": "HTMLInputElement" } },
              {
                "name": "_handleUserInitiatedExpand",
                "description": "Handles user-initiated gestures for expanding the search box.",
                "value": {}
              },
              {
                "name": "_handleFocusIn",
                "description": "Handles `focus` event handler on this element.",
                "value": {}
              },
              {
                "name": "_handleFocusOut",
                "description": "Handles `blur` event handler on this element.",
                "value": {}
              },
              {
                "name": "_handleSearchClick",
                "description": "Handles `click` event handler on the search box.",
                "value": {}
              },
              {
                "name": "expanded",
                "description": "`true` if the search box should be expanded.",
                "value": { "type": "boolean" }
              },
              {
                "name": "persistent",
                "description": "`true` if the search box should be always be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "size",
                "description": "The search box size.",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "eventInput",
                "description": "The name of the custom event fired after the search content is changed upon a user gesture.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "_handleInput",
                "description": "Handles `input` event on the `<input>` in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleClearInputButtonClick",
                "description": "Handles `click` event on the button to clear search box content.",
                "value": {}
              },
              {
                "name": "_handleExpand",
                "description": "Handles `focus` event on the button when the button can be expanded",
                "value": {}
              },
              {
                "name": "_handleClose",
                "description": "Handles `focusout` event on the component to be closed after being expanded\nWill not close if there is a value typed within.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handler for",
                "value": {}
              },
              {
                "name": "autoComplete",
                "description": "Specify an optional value for the autocomplete property on the underlying <input>,\ndefaults to \"off\"",
                "value": { "type": "string" }
              },
              {
                "name": "closeButtonLabelText",
                "description": "Specify a label to be read by screen readers on the \"close\" button",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "`true` if the search box should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "expandable",
                "description": "`true` if the search bar can be expandable",
                "value": { "type": "boolean" }
              },
              { "name": "hasCustomIcon", "value": { "type": "boolean" } },
              {
                "name": "labelText",
                "description": "The label text.",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "The form name in `FormData`.",
                "value": { "type": "string" }
              },
              {
                "name": "role",
                "description": "Specify the role for the underlying <input>, defaults to searchbox",
                "value": { "type": "string" }
              },
              {
                "name": "placeholder",
                "description": "The placeholder text.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "The `<input>` name.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "cds-search-input",
                "description": "The custom event fired after the search content is changed upon a user gesture."
              },
              {}
            ]
          }
        },
        {
          "name": "cds-table-toolbar",
          "description": "Table toolbar.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "size", "description": "Toolbar size", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorToolbarContent",
                "description": "The CSS selector to find the toolbar contents",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-table",
          "description": "Data table.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-table-header-cell-sort** - The name of the custom event fired before a new sort direction is set upon a user gesture. Cancellation of this event stops the user-initiated change in sort direction.\n- **cds-search** - input The name of the custom event fired during search bar input\n- **cds-table-change-selection-all** - The name of the custom event fired before header row is selected/unselected upon a user gesture.\n- **cds-table-row-change-selection** - The name of the custom event fired before a row is selected/unselected upon a user gesture.\n- **cds-table-batch-actions-cancel-clicked** - The name of the custom event fired after the Cancel button is clicked.\n- **cds-table-row-expando-toggled** - The name of the custom event fired after the expanded state of a row is toggled upon a user gesture.\n- **cds-table-row-selected** - The name of the custom event fired after a row has been selected.\n- **cds-table-row-all-selected** - The name of the custom event fired after all rows have been selected.\n- **cds-table-sorted** - The name of the custom event fired after the table has been sorted.\n- **cds-table-filtered** - The name of the custom event fired after the table has been filtered containing remaining rows.\n\n### **Methods:**\n - **_enableSortAction()** - Adds isSortable value for table header cells.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-table-header-cell-sort",
              "description": "The name of the custom event fired before a new sort direction is set upon a user gesture. Cancellation of this event stops the user-initiated change in sort direction."
            },
            {
              "name": "cds-search",
              "description": "input The name of the custom event fired during search bar input"
            },
            {
              "name": "cds-table-change-selection-all",
              "description": "The name of the custom event fired before header row is selected/unselected upon a user gesture."
            },
            {
              "name": "cds-table-row-change-selection",
              "description": "The name of the custom event fired before a row is selected/unselected upon a user gesture."
            },
            {
              "name": "cds-table-batch-actions-cancel-clicked",
              "description": "The name of the custom event fired after the Cancel button is clicked."
            },
            {
              "name": "cds-table-row-expando-toggled",
              "description": "The name of the custom event fired after the expanded state of a row is toggled upon a user gesture."
            },
            {
              "name": "cds-table-row-selected",
              "description": "The name of the custom event fired after a row has been selected."
            },
            {
              "name": "cds-table-row-all-selected",
              "description": "The name of the custom event fired after all rows have been selected."
            },
            {
              "name": "cds-table-sorted",
              "description": "The name of the custom event fired after the table has been sorted."
            },
            {
              "name": "cds-table-filtered",
              "description": "The name of the custom event fired after the table has been filtered containing remaining rows."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "collationFactors",
                "description": "The map of how sorting direction affects sorting order.",
                "value": { "type": "object" }
              },
              {
                "name": "_downloadButton",
                "description": "Reference to download button",
                "value": {}
              },
              {
                "name": "_searchValue",
                "description": "Current search value for filtering",
                "value": { "type": "string" }
              },
              {
                "name": "_tableHeaderRow",
                "description": "Table header row within component",
                "value": {}
              },
              {
                "name": "_tableBody",
                "description": "Table body",
                "value": {}
              },
              {
                "name": "_tableExpandedRows",
                "description": "Table expanded row within component",
                "value": {}
              },
              {
                "name": "_tableRows",
                "description": "Table rows within component",
                "value": {}
              },
              {
                "name": "_tableBatchActions",
                "description": "Reference to the component containing batch actions",
                "value": {}
              },
              {
                "name": "_tableToolbar",
                "description": "Reference to the table toolbar",
                "value": {}
              },
              {
                "name": "_tableToolbarContent",
                "description": "Reference to the table toolbar content",
                "value": {}
              },
              { "name": "_selectedRows", "value": { "type": "CDSTableRow[]" } },
              {
                "name": "batchExpansion",
                "description": "`true` if this table should support batch expansion",
                "value": { "type": "boolean" }
              },
              {
                "name": "collator",
                "description": "The g11n collator to use.",
                "value": {}
              },
              { "name": "customSortRow", "value": {} },
              {
                "name": "expandable",
                "description": "Specify whether the rows should be able to be expandable",
                "value": { "type": "boolean" }
              },
              {
                "name": "filterRows",
                "description": "The method used when filtering the table with the search bar.\nCan be replaced with custom method.",
                "value": {}
              },
              {
                "name": "headerCount",
                "description": "The total headers",
                "value": { "type": "number" }
              },
              {
                "name": "isSelectable",
                "description": "`true` if this table contains selectable rows",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSortable",
                "description": "`true` if this table should support sorting.",
                "value": { "type": "boolean" }
              },
              {
                "name": "locale",
                "description": "The table size.",
                "value": { "type": "string" }
              },
              {
                "name": "overflowMenuOnHover",
                "description": "Specify whether the overflow menu (if it exists) should be shown always, or only on hover",
                "value": { "type": "boolean" }
              },
              {
                "name": "radio",
                "description": "Specify whether the control should be a radio button or inline checkbox",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "The table size.", "value": {} },
              {
                "name": "useStaticWidth",
                "description": "If true, will use a width of 'auto' instead of 100%",
                "value": { "type": "boolean" }
              },
              {
                "name": "useZebraStyles",
                "description": "true to add useZebraStyles striping.",
                "value": { "type": "boolean" }
              },
              { "name": "withHeader", "value": {} },
              {
                "name": "withRowSlugs",
                "description": "true if slugs are added in the rows",
                "value": { "type": "boolean" }
              },
              { "name": "_handleSlotChange", "value": {} },
              { "name": "_handleSortAction", "value": {} },
              { "name": "_handleFilterRows", "value": {} },
              {
                "name": "_handleDownload",
                "description": "Download manager for selected rows.",
                "value": {}
              },
              {
                "name": "_handleBatchExpansion",
                "description": "Handles batch expansion",
                "value": {}
              },
              {
                "name": "_handleSort",
                "description": "Handles sorting the table depending on the column selected",
                "value": {}
              },
              {
                "name": "_handleSearchInput",
                "description": "Handles search input within the toolbar actions",
                "value": {}
              },
              {
                "name": "_handleRowSelect",
                "description": "Handles row selection",
                "value": {}
              },
              {
                "name": "_handleAllRowsSelect",
                "description": "Handles header row selection, selecting/unselecting all rows",
                "value": {}
              },
              {
                "name": "_handleCancelSelection",
                "description": "Handles cancel button within the toolbar actions",
                "value": {}
              },
              { "name": "firstUpdated", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "_enableSortAction",
                "description": "Adds isSortable value for table header cells.",
                "value": {}
              },
              {
                "name": "eventBeforeSort",
                "description": "The name of the custom event fired before a new sort direction is set upon a user gesture.\nCancellation of this event stops the user-initiated change in sort direction.",
                "value": {}
              },
              {
                "name": "eventSearchInput",
                "description": "The name of the custom event fired during search bar input",
                "value": {}
              },
              {
                "name": "eventBeforeChangeSelectionAll",
                "description": "The name of the custom event fired before header row is selected/unselected upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventBeforeChangeSelection",
                "description": "The name of the custom event fired before a row is selected/unselected upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventClickCancel",
                "description": "The name of the custom event fired after the Cancel button is clicked.",
                "value": {}
              },
              {
                "name": "eventExpandoToggle",
                "description": "The name of the custom event fired after the expanded state a row is toggled upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventTableRowSelect",
                "description": "The name of the custom event fired after a row has been selected",
                "value": {}
              },
              {
                "name": "eventTableRowSelectAll",
                "description": "The name of the custom event fired after all rows have been selected",
                "value": {}
              },
              {
                "name": "eventTableSorted",
                "description": "The name of the custom event fired after the table has been sorted",
                "value": {}
              },
              {
                "name": "eventTableFiltered",
                "description": "The name of the custom event fired after the table has been filtered containing remaining rows.",
                "value": {}
              },
              {
                "name": "selectorTableCellOverflowMenu",
                "description": "The CSS selector to find the overflow menu on the table cell",
                "value": {}
              },
              {
                "name": "selectorToolbarDownload",
                "description": "The CSS selector to find the download button",
                "value": {}
              },
              {
                "name": "selectorTableBatchActions",
                "description": "The CSS selector to find the table batch actions",
                "value": {}
              },
              {
                "name": "selectorTableToolbar",
                "description": "The CSS selector to find the table toolbar",
                "value": {}
              },
              {
                "name": "selectorTableToolbarContent",
                "description": "The CSS selector to find the table toolbar content",
                "value": {}
              },
              {
                "name": "selectorTableToolbarSearch",
                "description": "The CSS selector to find the table toolbar search",
                "value": {}
              },
              {
                "name": "selectorTableHead",
                "description": "The CSS selector to find the table head",
                "value": {}
              },
              {
                "name": "selectorTableBody",
                "description": "The CSS selector to find the table body",
                "value": {}
              },
              {
                "name": "selectorTableExpandedRows",
                "description": "The CSS selector to find the table expanded rows",
                "value": {}
              },
              {
                "name": "selectorTableRow",
                "description": "The CSS selector to find the table rows",
                "value": {}
              },
              {
                "name": "selectorTableRowCells",
                "description": "The CSS selector to find the rows cells.",
                "value": {}
              },
              {
                "name": "selectorTableCells",
                "description": "The CSS selector to find the rows cells, including header cells.",
                "value": {}
              },
              {
                "name": "selectorHeaderCell",
                "description": "The CSS selector to find the header cell",
                "value": {}
              },
              {
                "name": "selectorRowsWithHeader",
                "description": "The CSS selector to find the rows, including header rows.",
                "value": {}
              },
              {
                "name": "selectorAllRows",
                "description": "The CSS selector to find all rows",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              {},
              {
                "name": "cds-table-header-cell-sort",
                "description": "The name of the custom event fired before a new sort direction is set upon a user gesture. Cancellation of this event stops the user-initiated change in sort direction."
              },
              {
                "name": "cds-search",
                "description": "input The name of the custom event fired during search bar input"
              },
              {
                "name": "cds-table-change-selection-all",
                "description": "The name of the custom event fired before header row is selected/unselected upon a user gesture."
              },
              {
                "name": "cds-table-row-change-selection",
                "description": "The name of the custom event fired before a row is selected/unselected upon a user gesture."
              },
              {
                "name": "cds-table-batch-actions-cancel-clicked",
                "description": "The name of the custom event fired after the Cancel button is clicked."
              },
              {
                "name": "cds-table-row-expando-toggled",
                "description": "The name of the custom event fired after the expanded state of a row is toggled upon a user gesture."
              },
              {
                "name": "cds-table-row-selected",
                "description": "The name of the custom event fired after a row has been selected."
              },
              {
                "name": "cds-table-row-all-selected",
                "description": "The name of the custom event fired after all rows have been selected."
              },
              {
                "name": "cds-table-sorted",
                "description": "The name of the custom event fired after the table has been sorted."
              },
              {
                "name": "cds-table-filtered",
                "description": "The name of the custom event fired after the table has been filtered containing remaining rows."
              }
            ]
          }
        },
        {
          "name": "cds-file-uploader-container",
          "description": "File uploader button .\n---\n\n\n### **Events:**\n - **eventChange** - undefined\n- **cds-file-uploader-button-changed** - The custom event fired when there is a user gesture to select files to upload.",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "eventChange" },
            {
              "name": "cds-file-uploader-button-changed",
              "description": "The custom event fired when there is a user gesture to select files to upload."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_handleClick",
                "description": "Handles `click` event on the button.",
                "value": {}
              },
              {
                "name": "_handleKeyDown",
                "description": "Handles `keydown` event on the button.",
                "value": {}
              },
              {
                "name": "_handleChange",
                "description": "Handles user gesture to select files to upload.",
                "value": {}
              },
              { "name": "_getFiles", "value": {} },
              {
                "name": "buttonKind",
                "description": "Button kind.",
                "value": {}
              },
              { "name": "size", "description": "Button size.", "value": {} },
              {
                "name": "accept",
                "description": "The file types the file input should accept, separated by space.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "`true` if this drop container should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "multiple",
                "description": "`true` if this drop container should accept more than one files at once.\nNote that even with `false` set here, user _can_ select multiple files one by one.",
                "value": { "type": "boolean" }
              },
              {
                "name": "name",
                "description": "The name of the input.",
                "value": { "type": "string" }
              },
              {
                "name": "slot",
                "description": "The shadow DOM slot to put this drop container in.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired when there is a user gesture to select files to upload.",
                "value": {}
              },
              {
                "name": "selectorInput",
                "description": "A selector that will return the file `<input>`.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              { "name": "eventChange" },
              {
                "name": "cds-file-uploader-button-changed",
                "description": "The custom event fired when there is a user gesture to select files to upload."
              }
            ]
          }
        },
        {
          "name": "cds-file-uploader-drop-container",
          "description": "File uploader drop container.\n---\n\n\n### **Events:**\n - **eventChange** - undefined\n- **cds-file-uploader-drop-container-changed** - The custom event fired when there is a user gesture to select files to upload.",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "eventChange" },
            {
              "name": "cds-file-uploader-drop-container-changed",
              "description": "The custom event fired when there is a user gesture to select files to upload."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_active",
                "description": "`true` to show the active state of this UI.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleChange",
                "description": "Handles user gesture to select files to upload.",
                "value": {}
              },
              {
                "name": "_handleDrag",
                "description": "Handles `dragover`, `dragleave` and `drop` events.",
                "value": {}
              },
              { "name": "_getFiles", "value": {} },
              {
                "name": "accept",
                "description": "The file types the file input should accept, separated by space.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "`true` if this drop container should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "multiple",
                "description": "`true` if this drop container should accept more than one files at once.\nNote that even with `false` set here, user _can_ select multiple files one by one.",
                "value": { "type": "boolean" }
              },
              {
                "name": "name",
                "description": "The name of the input.",
                "value": { "type": "string" }
              },
              {
                "name": "slot",
                "description": "The shadow DOM slot to put this drop container in.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired when there is a user gesture to select files to upload.",
                "value": {}
              },
              {
                "name": "selectorInput",
                "description": "A selector that will return the file `<input>`.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              { "name": "eventChange" },
              {
                "name": "cds-file-uploader-drop-container-changed",
                "description": "The custom event fired when there is a user gesture to select files to upload."
              }
            ]
          }
        },
        {
          "name": "cds-file-uploader-item",
          "description": "File uploader item.\n---\n\n\n### **Events:**\n - **eventBeforeDelete** - undefined\n- **eventDelete** - undefined\n- **cds-file-uploader-item-beingdeleted** - The custom event fired before this file uploader item is being deleted upon a user gesture. Cancellation of this event stops the user-initiated action of deleting this file uploader item.\n- **cds-file-uploader-item-deleted** - The custom event fired after this file uploader item is deleted upon a user gesture.\n\n### **Slots:**\n - **validity-message** - The validity message.\n- **validity-message-supplement** - The supplemental validity message.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "validity-message",
              "description": "The validity message."
            },
            {
              "name": "validity-message-supplement",
              "description": "The supplemental validity message."
            }
          ],
          "events": [
            { "name": "eventBeforeDelete" },
            { "name": "eventDelete" },
            {
              "name": "cds-file-uploader-item-beingdeleted",
              "description": "The custom event fired before this file uploader item is being deleted upon a user gesture. Cancellation of this event stops the user-initiated action of deleting this file uploader item."
            },
            {
              "name": "cds-file-uploader-item-deleted",
              "description": "The custom event fired after this file uploader item is deleted upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_handleClickDeleteButton",
                "description": "Handles `click` event on the delete button.",
                "value": {}
              },
              { "name": "_renderEditing", "value": {} },
              { "name": "_renderUploading", "value": {} },
              { "name": "_renderUploaded", "value": {} },
              { "name": "_renderStatus", "value": {} },
              {
                "name": "iconDescription",
                "description": "The `aria-label` attribute for the icon to delete this file uploader item.",
                "value": { "type": "string" }
              },
              {
                "name": "invalid",
                "description": "Controls the invalid state and visibility of the `validityMessage`.",
                "value": { "type": "boolean" }
              },
              {
                "name": "size",
                "description": "The size of this file uploader item.",
                "value": {}
              },
              {
                "name": "state",
                "description": "The state of this file uploader item.",
                "value": {}
              },
              {
                "name": "errorSubject",
                "description": "The error subject text.",
                "value": { "type": "string" }
              },
              {
                "name": "errorBody",
                "description": "The error body text",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "eventBeforeDelete",
                "description": "The name of the custom event fired before this file uplodaer item is being deleted upon a user gesture.\nCancellation of this event stops the user-initiated action of deleting this file uploader item.",
                "value": {}
              },
              {
                "name": "eventDelete",
                "description": "The name of the custom event fired after this file uplodaer item is deleted upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": [
              { "name": "eventBeforeDelete" },
              { "name": "eventDelete" },
              {
                "name": "cds-file-uploader-item-beingdeleted",
                "description": "The custom event fired before this file uploader item is being deleted upon a user gesture. Cancellation of this event stops the user-initiated action of deleting this file uploader item."
              },
              {
                "name": "cds-file-uploader-item-deleted",
                "description": "The custom event fired after this file uploader item is deleted upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-file-uploader-skeleton",
          "description": "The File uploader skeleton.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [{ "name": "render", "value": {} }],
            "events": []
          }
        },
        {
          "name": "cds-file-uploader",
          "description": "The shell UI for file uploader.\n---\n\n\n### **Slots:**\n - **label-title.** - undefined\n- **lebel-description.** - undefined",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "label-title." },
            { "name": "lebel-description." }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "`true` if the file uploader should disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "labelDescription",
                "description": "The description text.",
                "value": { "type": "string" }
              },
              {
                "name": "labelTitle",
                "description": "The label title.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorUploaderItem",
                "description": "A selector that will return the `<input>` to enter starting date.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-dropdown-item",
          "description": "Dropdown item.\n---\n\n\n### **CSS Parts:**\n - **selected-icon** - The selected icon.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "`true` if this dropdown item should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "highlighted",
                "description": "`true` if this dropdown item should be highlighted.\nIf `true`, parent `<dropdown>` selects/deselects this dropdown item upon keyboard interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "`true` if this dropdown item should be selected.",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "Dropdown size.", "value": {} },
              {
                "name": "value",
                "description": "The `value` attribute that is set to the parent `<cds-dropdown>` when this dropdown item is selected.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "id",
                "description": "Store an identifier for use in composing this item's id.\n\nAuto-increments anytime a new dropdown-item appears.",
                "value": { "type": "number" }
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-dropdown",
          "description": "Dropdown.\n---\n\n\n### **Events:**\n - **eventBeforeToggle** - undefined\n- **eventToggle** - undefined\n- **cds-dropdown-beingselected** - The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-dropdown-beingtoggled** - The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.\n- **cds-dropdown-selected** - The custom event fired after a dropdown item is selected upon a user gesture.\n- **cds-dropdown-toggled** - The custom event fired after the open state of this dropdown is toggled upon a user gesture.\n- **invalid** - undefined\n\n### **Methods:**\n \n\n\n\n\n\n\n\n\n\n\n\n- **_handleFormdata(event: _Event_): _void_** - Handles event to include selected value on the parent form.\n\n- **checkValidity(): __** - Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.\n- **setCustomValidity(validityMessage: _string_)** - Sets the given custom validity message.\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **label-text** - The label text.\n- **helper-text** - The helper text.\n- **trigger-button** - The trigger button.\n- **menu-body** - The menu body.\n- **validity-message** - The validity message.",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "eventBeforeToggle" },
            { "name": "eventToggle" },
            {
              "name": "cds-dropdown-beingselected",
              "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-dropdown-beingtoggled",
              "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
            },
            {
              "name": "cds-dropdown-selected",
              "description": "The custom event fired after a dropdown item is selected upon a user gesture."
            },
            {
              "name": "cds-dropdown-toggled",
              "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture."
            },
            { "name": "invalid" }
          ],
          "js": {
            "properties": [
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_activeDescendant",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "_selectedItemContent",
                "description": "The content of the selected item.",
                "value": { "type": "DocumentFragment | null" }
              },
              {
                "name": "_shouldTriggerBeFocusable",
                "description": "`true` if the trigger button should be focusable.\nDerived class can set `false` to this if the trigger button contains another primary focusable element (e.g. `<input>`).",
                "value": { "type": "boolean" }
              },
              {
                "name": "_listBoxNode",
                "description": "The list box `<div>` node.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_slotHelperTextNode",
                "description": "The `<slot>` element for the helper text in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "_slotTitleTextNode",
                "description": "The `<slot>` element for the title text in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              { "name": "_selectionShouldChange", "value": {} },
              {
                "name": "_selectionDidChange",
                "description": "A callback that runs after change in dropdown selection upon user interaction is confirmed.",
                "value": {}
              },
              {
                "name": "_handleClickInner",
                "description": "Handles `click` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleKeydownInner",
                "description": "Handler for the `keydown` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleKeypressInner",
                "description": "Handler for the `keypress` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleFocusOut",
                "description": "Handles `blur` event handler on the document this element is in.",
                "value": {}
              },
              {
                "name": "_handleSlotchangeHelperText",
                "description": "Handles `slotchange` event for the `<slot>` for helper text.",
                "value": {}
              },
              {
                "name": "_handleSlotchangeLabelText",
                "description": "Handles `slotchange` event for the `<slot>` for label text.",
                "value": {}
              },
              {
                "name": "_handleSlugSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedSelectItem",
                "description": "Handles user-initiated selection of a dropdown item.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggling the open state.",
                "value": {}
              },
              {
                "name": "_clearHighlight",
                "description": "Clears the selection of dropdown items.",
                "value": {}
              },
              {
                "name": "_navigate",
                "description": "Navigate through dropdown items.",
                "value": {}
              },
              { "name": "_renderPrecedingLabel", "value": {} },
              { "name": "_renderLabel", "value": {} },
              { "name": "_renderTitleLabel", "value": {} },
              { "name": "_renderFollowingLabel", "value": {} },
              {
                "name": "_handleFormdata",
                "description": "Handles event to include selected value on the parent form.",
                "value": {}
              },
              {
                "name": "ariaLabel",
                "description": "'aria-label' of the ListBox component.\nSpecify a label to be read by screen readers on the container node",
                "value": { "type": "string" }
              },
              {
                "name": "direction",
                "description": "Specify the direction of the dropdown. Can be either top or bottom.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if this dropdown should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether the title text should be hidden or not",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalid",
                "description": "`true` to show the UI of the invalid state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "titleText",
                "description": "Provide the title text that will be read by a screen reader when visiting this control",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "Name for the dropdown in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "open",
                "description": "`true` if this dropdown should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readOnly",
                "description": "Whether or not the Dropdown is readonly",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "`true` if the value is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "requiredValidityMessage",
                "description": "The special validity message for `required`.",
                "value": { "type": "string" }
              },
              { "name": "size", "description": "Dropdown size.", "value": {} },
              {
                "name": "toggleLabelClosed",
                "description": "The `aria-label` attribute for the UI indicating the closed state.",
                "value": { "type": "string" }
              },
              {
                "name": "toggleLabelOpen",
                "description": "The `aria-label` attribute for the UI indicating the open state.",
                "value": { "type": "string" }
              },
              {
                "name": "label",
                "description": "Generic label that will be used as the textual representation of what this field is for",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "`true` if this dropdown should use the inline UI variant.",
                "value": {}
              },
              {
                "name": "validityMessage",
                "description": "The validity message.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value of the selected item.",
                "value": { "type": "string" }
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              { "name": "shouldUpdate", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "_classes",
                "description": "The CSS class list for dropdown listbox",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "TRIGGER_KEYS",
                "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item.",
                "value": {}
              },
              {
                "name": "selectorItemHighlighted",
                "description": "A selector that will return highlighted items.",
                "value": {}
              },
              {
                "name": "selectorItem",
                "description": "A selector that will return dropdown items.",
                "value": {}
              },
              {
                "name": "selectorItemSelected",
                "description": "A selector that will return selected items.",
                "value": {}
              },
              {
                "name": "eventBeforeSelect",
                "description": "The name of the custom event fired before a dropdown item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
                "value": {}
              },
              {
                "name": "eventSelect",
                "description": "The name of the custom event fired after a a dropdown item is selected upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventBeforeToggle",
                "description": "The name of the custom event fired before this dropdown item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this dropdown item.",
                "value": {}
              },
              {
                "name": "eventToggle",
                "description": "The name of the custom event fired after this dropdown item is toggled upon a user gesture.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              { "name": "getAction", "value": {} },
              { "name": "_getValidityMessage", "value": {} },
              {
                "name": "_testValidity",
                "description": "Checks if the value meets the constraints.",
                "value": {}
              },
              {
                "name": "checkValidity",
                "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets the given custom validity message.",
                "value": {}
              },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              { "name": "eventBeforeToggle" },
              { "name": "eventToggle" },
              {
                "name": "cds-dropdown-beingselected",
                "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-dropdown-beingtoggled",
                "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
              },
              {
                "name": "cds-dropdown-selected",
                "description": "The custom event fired after a dropdown item is selected upon a user gesture."
              },
              {
                "name": "cds-dropdown-toggled",
                "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture."
              },
              { "name": "invalid" }
            ]
          }
        },
        {
          "name": "cds-form-item",
          "description": "Presentational element for form items\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-form-group",
          "description": "The shell UI for file uploader.\n---\n\n\n### **Slots:**\n - **label-title.** - undefined\n- **lebel-description.** - undefined",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "label-title." },
            { "name": "lebel-description." }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "invalid",
                "description": "Specify whether the Form Group is invalid",
                "value": { "type": "boolean" }
              },
              {
                "name": "legendId",
                "description": "Provide id for the fieldset <legend> which corresponds to the fieldset\n`aria-labelledby`",
                "value": {}
              },
              {
                "name": "legendText",
                "description": "Provide the text to be rendered inside of the fieldset <legend>",
                "value": { "type": "string" }
              },
              {
                "name": "message",
                "description": "Specify whether the message should be displayed in the Form Group",
                "value": { "type": "boolean" }
              },
              {
                "name": "messageText",
                "description": "Provide the text for the message in the Form Group",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-inline-loading",
          "description": "Lnline loading spinner.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "assistiveText",
                "description": "The assistive text for the spinner icon.",
                "value": { "type": "string" }
              },
              { "name": "_renderIcon", "value": {} },
              {
                "name": "status",
                "description": "The loading status.",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-layer",
          "description": "Basic layer\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-use-layer** - The name of the custom event fired when the \"use layer\" action occurs.\n\n### **Slots:**\n - **children** - The elements contained within the component.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "children",
              "description": "The elements contained within the component."
            }
          ],
          "events": [
            {},
            {
              "name": "cds-use-layer",
              "description": "The name of the custom event fired when the \"use layer\" action occurs."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "level",
                "description": "Specify the layer level and override any existing levels based on hierarchy",
                "value": { "type": "number" }
              },
              { "name": "layers", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorLayer",
                "description": "A selector that selects a layer component.",
                "value": {}
              },
              {
                "name": "eventUseLayer",
                "description": "A selector that selects a layer component.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": [
              {},
              {
                "name": "cds-use-layer",
                "description": "The name of the custom event fired when the \"use layer\" action occurs."
              }
            ]
          }
        },
        {
          "name": "cds-link",
          "description": "Link.\n---\n\n\n### **Methods:**\n \n\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **link** - The link.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_linkNode",
                "value": {
                  "type": "HTMLAnchorElement | HTMLParagraphElement | undefined"
                }
              },
              {
                "name": "_classes",
                "description": "The CSS class list for the link node.",
                "value": {}
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on the `<a>`.",
                "value": {}
              },
              { "name": "_renderInner", "value": {} },
              { "name": "_renderDisabledLink", "value": {} },
              { "name": "_renderLink", "value": {} },
              {
                "name": "disabled",
                "description": "`true` if the link should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name.",
                "value": { "type": "string" }
              },
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to.",
                "value": { "type": "string" }
              },
              {
                "name": "inline",
                "description": "`true` if the link should be inline.",
                "value": { "type": "boolean" }
              },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "ping",
                "description": "URLs to ping.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Link size.",
                "value": { "type": "LINK_SIZE_TYPE" }
              },
              {
                "name": "target",
                "description": "The link target.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "MIME type of the `target`.",
                "value": { "type": "string" }
              },
              {
                "name": "visited",
                "description": "`true` if the link has been visited.",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-loading",
          "description": "Spinner indicating loading state.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "assistiveText",
                "description": "The assistive text for the spinner icon.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Spinner type.", "value": {} },
              {
                "name": "overlay",
                "description": "`true` if overlay should be applied.",
                "value": { "type": "boolean" }
              },
              {
                "name": "inactive",
                "description": "`true` if spinner should stop.",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-list-item",
          "description": "List item.\n---\n\n\n### **Slots:**\n - **nested** - The nested child list.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "nested", "description": "The nested child list." }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_hasNestedChild",
                "description": "`true` if there is slotted nested child list.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChangeNested",
                "description": "Handles `slotchange` event for the `<slot>` for the nested child list.",
                "value": {}
              },
              {
                "name": "nested",
                "description": "`true` if this list item is a child of a nested list.\n`<cds-ordered-list>` or `<cds-unordered-list>` automatically sets this property.",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              {
                "name": "selectorNestedList",
                "description": "A selector that will return nested list.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal-body-content",
          "description": "Modal body content\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal-body",
          "description": "Modal body.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal-close-button",
          "description": "Modal close button.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.\n- **close-icon** - The close icon.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "closeButtonLabel",
                "description": "Specify a label for the close button of the modal; defaults to close",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal-footer-button",
          "description": "Modal footer button.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "styles", "value": { "type": "array" } },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Button size.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal-footer",
          "description": "Modal footer.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "hasThreeButtons",
                "description": "`true` if this modal footer has more than two buttons.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "selectorButtons",
                "description": "A selector that selects the child buttons.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal-header",
          "description": "Modal header.\n---\n\n\n### **Methods:**\n ",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal-heading",
          "description": "Modal heading.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal-label",
          "description": "Modal label.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-modal",
          "description": "Modal.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-modal-beingclosed** - The custom event fired before this modal is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this modal.\n- **cds-modal-closed** - The custom event fired after this modal is closed upon a user gesture.\n\n### **CSS Parts:**\n - **dialog** - The dialog.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-modal-beingclosed",
              "description": "The custom event fired before this modal is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this modal."
            },
            {
              "name": "cds-modal-closed",
              "description": "The custom event fired after this modal is closed upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_launcher",
                "description": "The element that had focus before this modal gets open.",
                "value": { "type": "Element | null" }
              },
              {
                "name": "_startSentinelNode",
                "description": "Node to track focus going outside of modal content.",
                "value": { "type": "HTMLAnchorElement" }
              },
              {
                "name": "_endSentinelNode",
                "description": "Node to track focus going outside of modal content.",
                "value": { "type": "HTMLAnchorElement" }
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on this element.",
                "value": {}
              },
              {
                "name": "_handleBlur",
                "description": "Handles `blur` event on this element.",
                "value": {}
              },
              { "name": "_handleKeydown", "value": {} },
              {
                "name": "_handleClickContainer",
                "description": "Handles `click` event on the modal container.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedClose",
                "description": "Handles user-initiated close request of this modal.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "alert",
                "description": "Specify whether the Modal is displaying an alert, error or warning.\nShould go hand in hand with the danger prop.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ariaLabel",
                "description": "Specify text for the accessibility label of the header",
                "value": { "type": "string" }
              },
              {
                "name": "containerClass",
                "description": "The additional CSS class names for the container <div> of the element.",
                "value": { "type": "string" }
              },
              {
                "name": "fullWidth",
                "description": "Specify whether or not the Modal content should have any inner padding.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hasScrollingContent",
                "description": "Specify whether the modal contains scrolling content",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "`true` if the modal should be open.",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "Modal size.", "value": {} },
              {
                "name": "preventCloseOnClickOutside",
                "description": "Prevent closing on click outside of modal",
                "value": { "type": "boolean" }
              },
              {
                "name": "preventClose",
                "description": "Prevent the modal from closing after clicking the close button",
                "value": { "type": "boolean" }
              },
              { "name": "firstUpdated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "_delay", "value": {} },
              {
                "name": "selectorCloseButton",
                "description": "A selector selecting buttons that should close this modal.",
                "value": {}
              },
              {
                "name": "selectorTabbable",
                "description": "A selector selecting tabbable nodes.",
                "value": {}
              },
              {
                "name": "selectorPrimaryFocus",
                "description": "A selector selecting the nodes that should be focused when modal gets open.",
                "value": {}
              },
              {
                "name": "selectorModalBody",
                "description": "A selector selecting the modal body component",
                "value": {}
              },
              {
                "name": "eventBeforeClose",
                "description": "The name of the custom event fired before this modal is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this modal.",
                "value": {}
              },
              {
                "name": "eventClose",
                "description": "The name of the custom event fired after this modal is closed upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              {},
              {
                "name": "cds-modal-beingclosed",
                "description": "The custom event fired before this modal is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this modal."
              },
              {
                "name": "cds-modal-closed",
                "description": "The custom event fired after this modal is closed upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-multi-select-item",
          "description": "Multi select item.\n---\n\n\n### **CSS Parts:**\n - **selected-icon** - The selected icon.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "filtered",
                "description": "The property to hide when item is filtered from input",
                "value": {}
              },
              {
                "name": "selectionName",
                "description": "The `name` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "selectorList",
                "description": "A selector that will return multi select.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "disabled",
                "description": "`true` if this dropdown item should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "highlighted",
                "description": "`true` if this dropdown item should be highlighted.\nIf `true`, parent `<dropdown>` selects/deselects this dropdown item upon keyboard interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "`true` if this dropdown item should be selected.",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "Dropdown size.", "value": {} },
              {
                "name": "value",
                "description": "The `value` attribute that is set to the parent `<cds-dropdown>` when this dropdown item is selected.",
                "value": { "type": "string" }
              },
              {
                "name": "id",
                "description": "Store an identifier for use in composing this item's id.\n\nAuto-increments anytime a new dropdown-item appears.",
                "value": { "type": "number" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-multi-select",
          "description": "Multi select.\n---\n\n\n### **Events:**\n - **cds-multi-select-beingselected** - The custom event fired before a multi select item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-multi-select-selected** - The custom event fired after a multi select item is selected upon a user gesture.\n- **cds-multi-select-beingtoggled** - The custom event fired before the open state of this multi select is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.\n- **cds-multi-select-toggled** - The custom event fired after the open state of this multi select is toggled upon a user gesture.\n- **invalid** - undefined\n- **eventBeforeToggle** - undefined\n- **eventToggle** - undefined\n- **cds-dropdown-beingselected** - The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-dropdown-beingtoggled** - The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.\n- **cds-dropdown-selected** - The custom event fired after a dropdown item is selected upon a user gesture.\n- **cds-dropdown-toggled** - The custom event fired after the open state of this dropdown is toggled upon a user gesture.\n\n### **Methods:**\n \n\n\n\n\n\n\n\n- **checkValidity(): __** - Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.\n- **setCustomValidity(validityMessage: _string_)** - Sets the given custom validity message.\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n\n\n\n\n\n\n\n\n### **CSS Parts:**\n - **label-text** - The label text.\n- **helper-text** - The helper text.\n- **trigger-button** - The trigger button.\n- **menu-body** - The menu body.\n- **validity-message** - The validity message.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-multi-select-beingselected",
              "description": "The custom event fired before a multi select item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-multi-select-selected",
              "description": "The custom event fired after a multi select item is selected upon a user gesture."
            },
            {
              "name": "cds-multi-select-beingtoggled",
              "description": "The custom event fired before the open state of this multi select is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
            },
            {
              "name": "cds-multi-select-toggled",
              "description": "The custom event fired after the open state of this multi select is toggled upon a user gesture."
            },
            { "name": "invalid" },
            { "name": "eventBeforeToggle" },
            { "name": "eventToggle" },
            {
              "name": "cds-dropdown-beingselected",
              "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-dropdown-beingtoggled",
              "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
            },
            {
              "name": "cds-dropdown-selected",
              "description": "The custom event fired after a dropdown item is selected upon a user gesture."
            },
            {
              "name": "cds-dropdown-toggled",
              "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              { "name": "filterable", "value": {} },
              {
                "name": "_selectedItemsCount",
                "description": "The count of selected items.",
                "value": { "type": "number" }
              },
              {
                "name": "_clearButtonNode",
                "description": "The clear button.",
                "value": { "type": "HTMLElement" }
              },
              {
                "name": "_selectionButtonNode",
                "description": "The selection button.",
                "value": { "type": "HTMLElement" }
              },
              {
                "name": "_menuBodyNode",
                "description": "The menu body.",
                "value": { "type": "HTMLElement" }
              },
              {
                "name": "_filterInputNode",
                "description": "The `<input>` for filtering.",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "_triggerNode",
                "description": "The trigger button.",
                "value": { "type": "HTMLElement" }
              },
              { "name": "_selectionShouldChange", "value": {} },
              {
                "name": "_selectionDidChange",
                "description": "A callback that runs after change in dropdown selection upon user interaction is confirmed.",
                "value": {}
              },
              {
                "name": "_handleClickInner",
                "description": "Handles `click` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleKeypressInner",
                "description": "Handler for the `keypress` event, ensures filter still works upon entering space",
                "value": {}
              },
              {
                "name": "_handleKeypressInnerFlterable",
                "description": "Special andler for the `keypress` event, ensures space selection for filterable\nvariation is disabled",
                "value": {}
              },
              { "name": "_renderTitleLabel", "value": {} },
              { "name": "_renderPrecedingLabel", "value": {} },
              { "name": "_renderLabel", "value": {} },
              { "name": "_renderFollowingLabel", "value": {} },
              {
                "name": "_handleInput",
                "description": "Handles `input` event on the `<input>` for filtering.",
                "value": {}
              },
              {
                "name": "_navigate",
                "description": "Navigate through dropdown items.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedClearInput",
                "description": "Handles user-initiated clearing the `<input>` for filtering.",
                "value": {}
              },
              {
                "name": "clearSelectionLabel",
                "description": "The `aria-label` attribute for the icon to clear selection.",
                "value": { "type": "string" }
              },
              {
                "name": "clearSelectionDescription",
                "description": "Specify the text that should be read for screen readers that describes total items selected",
                "value": { "type": "string" }
              },
              {
                "name": "clearSelectionText",
                "description": "Specify the text that should be read for screen readers to clear selection.",
                "value": { "type": "string" }
              },
              {
                "name": "locale",
                "description": "Specify the locale of the control. Used for the default compareItems used for sorting the list of items in the control.",
                "value": { "type": "string" }
              },
              {
                "name": "selectionFeedback",
                "description": "Specify feedback (mode) of the selection.\n`top`: selected item jumps to top\n`fixed`: selected item stays at it's position\n`top-after-reopen`: selected item jump to top after reopen dropdown",
                "value": {}
              },
              {
                "name": "_classes",
                "description": "The CSS class list for multi-select listbox",
                "value": {}
              },
              { "name": "compareItems", "value": {} },
              { "name": "sortItems", "value": {} },
              { "name": "shouldUpdate", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "selectorMenuBody",
                "description": "A selector that will return menu body.",
                "value": {}
              },
              {
                "name": "selectorItemHighlighted",
                "description": "A selector that will return highlighted items.",
                "value": {}
              },
              {
                "name": "selectorItem",
                "description": "A selector that will return multi select items.\nWe use a separate property from `.itemTagName` due to the nature in difference of tag name vs. selector.",
                "value": {}
              },
              {
                "name": "selectorItemFiltered",
                "description": "A selector that will return remaining items after a filter.",
                "value": {}
              },
              {
                "name": "selectorItemResults",
                "description": "A selector that will return remaining items after a filter.",
                "value": {}
              },
              {
                "name": "selectorItemSelected",
                "description": "A selector that will return selected items.",
                "value": {}
              },
              {
                "name": "eventBeforeToggle",
                "description": "The name of the custom event fired before this multi select item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this multi select item.",
                "value": {}
              },
              {
                "name": "eventToggle",
                "description": "The name of the custom event fired after this multi select item is toggled upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventBeforeSelect",
                "description": "The name of the custom event fired before a multi select item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
                "value": {}
              },
              {
                "name": "eventSelect",
                "description": "The name of the custom event fired after a a multi select item is selected upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              { "name": "_getValidityMessage", "value": {} },
              {
                "name": "_testValidity",
                "description": "Checks if the value meets the constraints.",
                "value": {}
              },
              {
                "name": "invalid",
                "description": "`true` to show the UI of the invalid state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "`true` if the value is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "requiredValidityMessage",
                "description": "The special validity message for `required`.",
                "value": { "type": "string" }
              },
              {
                "name": "validityMessage",
                "description": "The validity message.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              {
                "name": "checkValidity",
                "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets the given custom validity message.",
                "value": {}
              },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_activeDescendant",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "_selectedItemContent",
                "description": "The content of the selected item.",
                "value": { "type": "DocumentFragment | null" }
              },
              {
                "name": "_shouldTriggerBeFocusable",
                "description": "`true` if the trigger button should be focusable.\nDerived class can set `false` to this if the trigger button contains another primary focusable element (e.g. `<input>`).",
                "value": { "type": "boolean" }
              },
              {
                "name": "_listBoxNode",
                "description": "The list box `<div>` node.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_slotHelperTextNode",
                "description": "The `<slot>` element for the helper text in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "_slotTitleTextNode",
                "description": "The `<slot>` element for the title text in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "_handleKeydownInner",
                "description": "Handler for the `keydown` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleFocusOut",
                "description": "Handles `blur` event handler on the document this element is in.",
                "value": {}
              },
              {
                "name": "_handleSlotchangeHelperText",
                "description": "Handles `slotchange` event for the `<slot>` for helper text.",
                "value": {}
              },
              {
                "name": "_handleSlotchangeLabelText",
                "description": "Handles `slotchange` event for the `<slot>` for label text.",
                "value": {}
              },
              {
                "name": "_handleSlugSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedSelectItem",
                "description": "Handles user-initiated selection of a dropdown item.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggling the open state.",
                "value": {}
              },
              {
                "name": "_clearHighlight",
                "description": "Clears the selection of dropdown items.",
                "value": {}
              },
              {
                "name": "ariaLabel",
                "description": "'aria-label' of the ListBox component.\nSpecify a label to be read by screen readers on the container node",
                "value": { "type": "string" }
              },
              {
                "name": "direction",
                "description": "Specify the direction of the dropdown. Can be either top or bottom.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if this dropdown should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether the title text should be hidden or not",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "titleText",
                "description": "Provide the title text that will be read by a screen reader when visiting this control",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "Name for the dropdown in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "open",
                "description": "`true` if this dropdown should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readOnly",
                "description": "Whether or not the Dropdown is readonly",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "Dropdown size.", "value": {} },
              {
                "name": "toggleLabelClosed",
                "description": "The `aria-label` attribute for the UI indicating the closed state.",
                "value": { "type": "string" }
              },
              {
                "name": "toggleLabelOpen",
                "description": "The `aria-label` attribute for the UI indicating the open state.",
                "value": { "type": "string" }
              },
              {
                "name": "label",
                "description": "Generic label that will be used as the textual representation of what this field is for",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "`true` if this dropdown should use the inline UI variant.",
                "value": {}
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "TRIGGER_KEYS",
                "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "getAction", "value": {} }
            ],
            "events": [
              {
                "name": "cds-multi-select-beingselected",
                "description": "The custom event fired before a multi select item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-multi-select-selected",
                "description": "The custom event fired after a multi select item is selected upon a user gesture."
              },
              {
                "name": "cds-multi-select-beingtoggled",
                "description": "The custom event fired before the open state of this multi select is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
              },
              {
                "name": "cds-multi-select-toggled",
                "description": "The custom event fired after the open state of this multi select is toggled upon a user gesture."
              },
              { "name": "invalid" },
              { "name": "eventBeforeToggle" },
              { "name": "eventToggle" },
              {
                "name": "cds-dropdown-beingselected",
                "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-dropdown-beingtoggled",
                "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
              },
              {
                "name": "cds-dropdown-selected",
                "description": "The custom event fired after a dropdown item is selected upon a user gesture."
              },
              {
                "name": "cds-dropdown-toggled",
                "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-actionable-notification-button",
          "description": "Actionable notification action button.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "update", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Button size.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-actionable-notification",
          "description": "Actionable notification.\n---\n\n\n### **Events:**\n - **cds-notification-beingclosed** - The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification.\n- **cds-notification-closed** - The custom event fired after this notification is closed upon a user gesture.\n- **undefined** - undefined\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n\n\n\n\n### **Slots:**\n - **subtitle** - The subtitle.\n- **title** - The title.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "subtitle", "description": "The subtitle." },
            { "name": "title", "description": "The title." }
          ],
          "events": [
            {
              "name": "cds-notification-beingclosed",
              "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification."
            },
            {
              "name": "cds-notification-closed",
              "description": "The custom event fired after this notification is closed upon a user gesture."
            },
            {}
          ],
          "js": {
            "properties": [
              {
                "name": "_type",
                "description": "Notification type.",
                "value": {}
              },
              {
                "name": "inline",
                "description": "Inline notification type.",
                "value": { "type": "boolean" }
              },
              {
                "name": "actionButtonLabel",
                "description": "Pass in the action button label that will be rendered within the ActionableNotification.",
                "value": { "type": "string" }
              },
              {
                "name": "closeOnEscape",
                "description": "Specify if pressing the escape key should close notifications",
                "value": { "type": "boolean" }
              },
              {
                "name": "hasFocus",
                "description": "Specify if focus should be moved to the component when the notification contains actions",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleKeyDown",
                "description": "Handles `keydown` event on this event.\nEscape will close the notification if `closeOnEscape` is true",
                "value": {}
              },
              { "name": "_renderIcon", "value": {} },
              { "name": "_renderText", "value": {} },
              {
                "name": "caption",
                "description": "The caption.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorActionButton",
                "description": "A selector that will return the action button element",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_timeoutID",
                "description": "Current timeout identifier",
                "value": { "type": "number | null" }
              },
              {
                "name": "_cancelTimeout",
                "description": "Cancels the current timeout configured for the notification",
                "value": {}
              },
              {
                "name": "_initializeTimeout",
                "description": "Overrides (if exists) the timeout to close the notification",
                "value": {}
              },
              {
                "name": "_handleClickCloseButton",
                "description": "Handles `click` event on the close button.",
                "value": {}
              },
              {
                "name": "_handleUserOrTimerInitiatedClose",
                "description": "Handles user-initiated or through timer close request of this modal.",
                "value": {}
              },
              { "name": "_renderButton", "value": {} },
              {
                "name": "ariaLabel",
                "description": "Provide a description for \"close\" icon button that can be read by screen readers",
                "value": { "type": "string" }
              },
              {
                "name": "hideCloseButton",
                "description": "`true` to hide the close button.",
                "value": { "type": "boolean" }
              },
              {
                "name": "statusIconDescription",
                "description": "Provide a description for \"status\" icon that can be read by screen readers",
                "value": { "type": "string" }
              },
              {
                "name": "kind",
                "description": "Notification kind.",
                "value": {}
              },
              {
                "name": "lowContrast",
                "description": "Low contrast mode",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "`true` if the notification should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "timeout",
                "description": "Specify an optional duration the notification should be closed in",
                "value": { "type": "number | null" }
              },
              {
                "name": "subtitle",
                "description": "The subtitle.",
                "value": { "type": "string" }
              },
              {
                "name": "title",
                "description": "The title.",
                "value": { "type": "string" }
              },
              {
                "name": "eventBeforeClose",
                "description": "The name of the custom event fired before this notification is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this notification.",
                "value": {}
              },
              {
                "name": "eventClose",
                "description": "The name of the custom event fired after this notification is closed upon a user gesture.",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "cds-notification-beingclosed",
                "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification."
              },
              {
                "name": "cds-notification-closed",
                "description": "The custom event fired after this notification is closed upon a user gesture."
              },
              {}
            ]
          }
        },
        {
          "name": "cds-inline-notification",
          "description": "Inline notification.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-notification-beingclosed** - The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification.\n- **cds-notification-closed** - The custom event fired after this notification is closed upon a user gesture.\n\n### **Methods:**\n \n\n\n\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **Slots:**\n - **subtitle** - The subtitle.\n- **title** - The title.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "subtitle", "description": "The subtitle." },
            { "name": "title", "description": "The title." }
          ],
          "events": [
            {},
            {
              "name": "cds-notification-beingclosed",
              "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification."
            },
            {
              "name": "cds-notification-closed",
              "description": "The custom event fired after this notification is closed upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_timeoutID",
                "description": "Current timeout identifier",
                "value": { "type": "number | null" }
              },
              {
                "name": "_type",
                "description": "Notification type.",
                "value": {}
              },
              {
                "name": "_cancelTimeout",
                "description": "Cancels the current timeout configured for the notification",
                "value": {}
              },
              {
                "name": "_initializeTimeout",
                "description": "Overrides (if exists) the timeout to close the notification",
                "value": {}
              },
              {
                "name": "_handleClickCloseButton",
                "description": "Handles `click` event on the close button.",
                "value": {}
              },
              {
                "name": "_handleUserOrTimerInitiatedClose",
                "description": "Handles user-initiated or through timer close request of this modal.",
                "value": {}
              },
              { "name": "_renderButton", "value": {} },
              { "name": "_renderText", "value": {} },
              { "name": "_renderIcon", "value": {} },
              {
                "name": "ariaLabel",
                "description": "Provide a description for \"close\" icon button that can be read by screen readers",
                "value": { "type": "string" }
              },
              {
                "name": "hideCloseButton",
                "description": "`true` to hide the close button.",
                "value": { "type": "boolean" }
              },
              {
                "name": "statusIconDescription",
                "description": "Provide a description for \"status\" icon that can be read by screen readers",
                "value": { "type": "string" }
              },
              {
                "name": "kind",
                "description": "Notification kind.",
                "value": {}
              },
              {
                "name": "lowContrast",
                "description": "Low contrast mode",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "`true` if the notification should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "timeout",
                "description": "Specify an optional duration the notification should be closed in",
                "value": { "type": "number | null" }
              },
              {
                "name": "subtitle",
                "description": "The subtitle.",
                "value": { "type": "string" }
              },
              {
                "name": "title",
                "description": "The title.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "eventBeforeClose",
                "description": "The name of the custom event fired before this notification is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this notification.",
                "value": {}
              },
              {
                "name": "eventClose",
                "description": "The name of the custom event fired after this notification is closed upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {},
              {
                "name": "cds-notification-beingclosed",
                "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification."
              },
              {
                "name": "cds-notification-closed",
                "description": "The custom event fired after this notification is closed upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-toast-notification",
          "description": "Toast notification.\n---\n\n\n### **Events:**\n - **cds-notification-beingclosed** - The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification.\n- **cds-notification-closed** - The custom event fired after this notification is closed upon a user gesture.\n- **undefined** - undefined\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n\n\n\n\n### **Slots:**\n - **subtitle** - The subtitle.\n- **title** - The title.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "subtitle", "description": "The subtitle." },
            { "name": "title", "description": "The title." }
          ],
          "events": [
            {
              "name": "cds-notification-beingclosed",
              "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification."
            },
            {
              "name": "cds-notification-closed",
              "description": "The custom event fired after this notification is closed upon a user gesture."
            },
            {}
          ],
          "js": {
            "properties": [
              {
                "name": "_type",
                "description": "Notification type.",
                "value": {}
              },
              { "name": "_renderText", "value": {} },
              {
                "name": "caption",
                "description": "Specify the caption",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_timeoutID",
                "description": "Current timeout identifier",
                "value": { "type": "number | null" }
              },
              {
                "name": "_cancelTimeout",
                "description": "Cancels the current timeout configured for the notification",
                "value": {}
              },
              {
                "name": "_initializeTimeout",
                "description": "Overrides (if exists) the timeout to close the notification",
                "value": {}
              },
              {
                "name": "_handleClickCloseButton",
                "description": "Handles `click` event on the close button.",
                "value": {}
              },
              {
                "name": "_handleUserOrTimerInitiatedClose",
                "description": "Handles user-initiated or through timer close request of this modal.",
                "value": {}
              },
              { "name": "_renderButton", "value": {} },
              { "name": "_renderIcon", "value": {} },
              {
                "name": "ariaLabel",
                "description": "Provide a description for \"close\" icon button that can be read by screen readers",
                "value": { "type": "string" }
              },
              {
                "name": "hideCloseButton",
                "description": "`true` to hide the close button.",
                "value": { "type": "boolean" }
              },
              {
                "name": "statusIconDescription",
                "description": "Provide a description for \"status\" icon that can be read by screen readers",
                "value": { "type": "string" }
              },
              {
                "name": "kind",
                "description": "Notification kind.",
                "value": {}
              },
              {
                "name": "lowContrast",
                "description": "Low contrast mode",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "`true` if the notification should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "timeout",
                "description": "Specify an optional duration the notification should be closed in",
                "value": { "type": "number | null" }
              },
              {
                "name": "subtitle",
                "description": "The subtitle.",
                "value": { "type": "string" }
              },
              {
                "name": "title",
                "description": "The title.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              {
                "name": "eventBeforeClose",
                "description": "The name of the custom event fired before this notification is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this notification.",
                "value": {}
              },
              {
                "name": "eventClose",
                "description": "The name of the custom event fired after this notification is closed upon a user gesture.",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "cds-notification-beingclosed",
                "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification."
              },
              {
                "name": "cds-notification-closed",
                "description": "The custom event fired after this notification is closed upon a user gesture."
              },
              {}
            ]
          }
        },
        {
          "name": "cds-number-input",
          "description": "Number input.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-number-input** - The name of the custom event fired after the value is changed upon a user gesture.\n- **invalid** - undefined\n\n### **Methods:**\n \n\n\n- **stepUp()** - Handles incrementing the value in the input\n- **stepDown()** - Handles decrementing the value in the input\n\n- **checkValidity(): __** - Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.\n- **setCustomValidity(validityMessage: _string_)** - Sets the given custom validity message.\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n\n\n### **Slots:**\n - **helper-text** - The helper text.\n- **label-text** - The label text.\n- **validity-message** - The validity message. If present and non-empty, this input shows the UI of its invalid state.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "helper-text", "description": "The helper text." },
            { "name": "label-text", "description": "The label text." },
            {
              "name": "validity-message",
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state."
            }
          ],
          "events": [
            {},
            {
              "name": "cds-number-input",
              "description": "The name of the custom event fired after the value is changed upon a user gesture."
            },
            { "name": "invalid" }
          ],
          "js": {
            "properties": [
              {
                "name": "_handleInput",
                "description": "Handles `input` event on the `<input>` in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedStepDown",
                "description": "Handles `click` event on the up button in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedStepUp",
                "description": "Handles `click` event on the down button in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_input",
                "description": "The underlying input element",
                "value": { "type": "HTMLInputElement" }
              },
              { "name": "_getInputValidity", "value": {} },
              { "name": "_min", "value": { "type": "string" } },
              { "name": "_max", "value": { "type": "string" } },
              { "name": "_step", "value": { "type": "string" } },
              {
                "name": "min",
                "description": "The minimum value allowed in the input",
                "value": {}
              },
              {
                "name": "max",
                "description": "The maximum value allowed in the input",
                "value": {}
              },
              {
                "name": "step",
                "description": "The amount the value should increase or decrease by",
                "value": {}
              },
              {
                "name": "incrementButtonAssistiveText",
                "description": "Aria text for the button that increments the value",
                "value": { "type": "string" }
              },
              {
                "name": "decrementButtonAssistiveText",
                "description": "Aria text for the button that decrements the value",
                "value": { "type": "string" }
              },
              {
                "name": "hideSteppers",
                "description": "Specify whether you want the steppers to be hidden",
                "value": { "type": "boolean" }
              },
              {
                "name": "allowEmpty",
                "description": "`true` to allow empty string.",
                "value": { "type": "boolean" }
              },
              {
                "name": "size",
                "description": "The input box size.",
                "value": {}
              },
              {
                "name": "stepUp",
                "description": "Handles incrementing the value in the input",
                "value": {}
              },
              {
                "name": "stepDown",
                "description": "Handles decrementing the value in the input",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "eventInput",
                "description": "The name of the custom event fired after the value is changed upon a user gesture.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              { "name": "_getValidityMessage", "value": {} },
              {
                "name": "_testValidity",
                "description": "Checks if the value meets the constraints.",
                "value": {}
              },
              {
                "name": "invalid",
                "description": "`true` to show the UI of the invalid state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "`true` if the value is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "requiredValidityMessage",
                "description": "The special validity message for `required`.",
                "value": { "type": "string" }
              },
              {
                "name": "validityMessage",
                "description": "The validity message.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              {
                "name": "checkValidity",
                "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets the given custom validity message.",
                "value": {}
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_value",
                "description": "The internal value.",
                "value": { "type": "string" }
              },
              {
                "name": "autocomplete",
                "description": "May be any of the standard HTML autocomplete options",
                "value": { "type": "string" }
              },
              {
                "name": "autofocus",
                "description": "Sets the input to be focussed automatically on page load. Defaults to false",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Controls the disabled state of the input",
                "value": { "type": "boolean" }
              },
              {
                "name": "enableCounter",
                "description": "Specify whether to display the character counter",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": { "type": "string" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "maxCount",
                "description": "Max character count allowed for input. This is needed in order for enableCounter to display",
                "value": {}
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether you want the underlying label to be visually hidden",
                "value": { "type": "boolean" }
              },
              {
                "name": "label",
                "description": "Generic label that will be used as the textual representation of what this field is for",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "Name for the input in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "pattern",
                "description": "Pattern to validate the input against for HTML validity checking",
                "value": { "type": "string" }
              },
              {
                "name": "placeholder",
                "description": "Value to display when the input has an empty `value`",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Specify if the component should be read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "hidePasswordLabel",
                "description": "\"Hide password\" tooltip text on password visibility toggle",
                "value": { "type": "string" }
              },
              {
                "name": "showPasswordLabel",
                "description": "\"Show password\" tooltip text on password visibility toggle",
                "value": { "type": "string" }
              },
              {
                "name": "showPasswordVisibilityToggle",
                "description": "Boolean property to render password visibility toggle",
                "value": { "type": "boolean" }
              },
              {
                "name": "inline",
                "description": "true to use the inline version.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipDirection",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "type",
                "description": "The type of the input. Can be one of the types listed in the INPUT_TYPE enum",
                "value": {}
              },
              {
                "name": "handleTogglePasswordVisibility",
                "description": "Handles password visibility toggle button click",
                "value": {}
              },
              { "name": "updated", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              }
            ],
            "events": [
              {},
              {
                "name": "cds-number-input",
                "description": "The name of the custom event fired after the value is changed upon a user gesture."
              },
              { "name": "invalid" }
            ]
          }
        },
        {
          "name": "cds-overflow-menu-body",
          "description": "Overflow menu body.\n---\n\n\n### **Methods:**\n \n- **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "direction",
                "description": "The menu direction.",
                "value": { "type": "FLOATING_MENU_DIRECTION" }
              },
              {
                "name": "flipped",
                "description": "How the menu is aligned to the trigger button.",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "`true` if the menu should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "value": { "type": "CDSOverflowMenuItem | null" }
              },
              {
                "name": "size",
                "description": "The overflow menu size.",
                "value": {}
              },
              { "name": "_getNextItem", "value": {} },
              {
                "name": "_navigate",
                "description": "Navigates through overflow menu items.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on the menu body.",
                "value": {}
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorMenuItem",
                "description": "A selector that will return menu items.",
                "value": {}
              },
              {
                "name": "selectorItemEnabled",
                "description": "A selector that will return enabled menu items.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hObserveResizeParent",
                "description": "The handle for observing resize of the element containing the trigger button.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_hObserveResizeContainer",
                "description": "The handle for observing resize of the floating menu container.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_resizeObserver",
                "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position.",
                "value": {}
              },
              { "name": "_handleBlur", "value": {} },
              { "name": "_click", "value": {} },
              { "name": "_handleKeyDown", "value": {} },
              {
                "name": "parent",
                "description": "The DOM element, typically a custom element in this library, launching this floating menu.",
                "value": { "type": "CDSFloatingMenuTrigger | null" }
              },
              {
                "name": "container",
                "description": "The DOM element to put this menu into.",
                "value": {}
              },
              {
                "name": "position",
                "description": "The position of this floating menu.",
                "value": { "type": "FloatingMenuPosition" }
              },
              {
                "name": "FLOATING_MENU",
                "description": "A constant indicating that this class is a floating menu.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selectorContainer",
                "description": "The CSS selector to find the element to put this floating menu in.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-overflow-menu-item",
          "description": "Overflow menu item.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "danger",
                "description": "`true` if the action is danger.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "`true` if the overflow menu item should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "divider",
                "description": "`true` if the item has a divider",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "The link href of the overflow menu item.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "The size of the overflow menu item.",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-overflow-menu",
          "description": "Overflow menu.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **Slots:**\n - **icon** - The icon for the trigger button.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "icon",
              "description": "The icon for the trigger button."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_menuBody",
                "description": "The menu body.",
                "value": { "type": "CDSOverflowMenuBody | null" }
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggling of the menu.",
                "value": {}
              },
              {
                "name": "_handleClickTrigger",
                "description": "Handles `click` event on the trigger button.",
                "value": {}
              },
              {
                "name": "_handleKeydownTrigger",
                "description": "Handles `keydown` event on the trigger button.",
                "value": {}
              },
              {
                "name": "dataTable",
                "description": "`true` if this tooltip is in a data table row",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "`true` if this overflow menu should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "flipped",
                "description": "`true` if this overflow menu body should be flipped.",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "`true` if the dropdown should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "index",
                "description": "Index (starting at 1) of overflow menu item to focus on open.",
                "value": { "type": "number" }
              },
              {
                "name": "size",
                "description": "Overflow menu size.",
                "value": { "type": "string" }
              },
              {
                "name": "toolbarAction",
                "description": "`true` if this menu is a toolbar action",
                "value": { "type": "boolean" }
              },
              { "name": "triggerPosition", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "align",
                "description": "Specify how the trigger should align with the tooltip",
                "value": { "type": "string" }
              },
              {
                "name": "autoalign",
                "description": "Specify whether a auto align functionality should be applied",
                "value": { "type": "boolean" }
              },
              {
                "name": "closeOnActivation",
                "description": "Determines whether the tooltip should close when inner content is activated (click, Enter or Space)",
                "value": { "type": "boolean" }
              },
              {
                "name": "defaultOpen",
                "description": "Specify whether the tooltip should be open when it first renders",
                "value": { "type": "boolean" }
              },
              {
                "name": "enterDelayMs",
                "description": "Specify the duration in milliseconds to delay before displaying the tooltip",
                "value": { "type": "number" }
              },
              {
                "name": "leaveDelayMs",
                "description": "Specify the duration in milliseconds to delay before hiding the tooltip",
                "value": { "type": "number" }
              },
              { "name": "_renderTooltipContent", "value": {} },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-popover",
          "description": "Popover.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "align",
                "description": "Specify the popover alignment",
                "value": { "type": "string" }
              },
              {
                "name": "autoalign",
                "description": "Specify whether a auto align functionality should be applied",
                "value": { "type": "boolean" }
              },
              {
                "name": "caret",
                "description": "Specify whether a caret should be rendered",
                "value": {}
              },
              {
                "name": "dropShadow",
                "description": "Specify whether a dropShadow should be rendered",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "Specify whether the component is currently open or closed",
                "value": { "type": "boolean" }
              },
              {
                "name": "tabTip",
                "description": "Render the component using the tab tip variant",
                "value": { "type": "boolean" }
              },
              {
                "name": "slot",
                "description": "The shadow slot this popover content should be in.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-popover",
          "description": "Popover.\n---\n\n\n### **Methods:**\n ",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "popoverController",
                "description": "Create popover controller instance",
                "value": {}
              },
              {
                "name": "_triggerSlotNode",
                "description": "The `<slot>` element in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "_contentSlotNode",
                "description": "The `<slot>` element in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "align",
                "description": "Specify direction of alignment",
                "value": { "type": "string" }
              },
              {
                "name": "autoalign",
                "description": "Specify whether a auto align functionality should be applied",
                "value": { "type": "boolean" }
              },
              {
                "name": "caret",
                "description": "Specify whether a caret should be rendered",
                "value": { "type": "boolean" }
              },
              {
                "name": "dropShadow",
                "description": "Specify whether a dropShadow should be rendered",
                "value": { "type": "boolean" }
              },
              {
                "name": "highContrast",
                "description": "Render the component using the high-contrast variant",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "Specify whether the component is currently open or closed",
                "value": { "type": "boolean" }
              },
              {
                "name": "tabTip",
                "description": "Render the component using the tab tip variant",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorPopoverContentClass",
                "description": "A selector that will return popover content element within\nCDSPopoverContent's shadowRoot.",
                "value": {}
              },
              {
                "name": "selectorPopoverCaret",
                "description": "A selector that will return popover caret element within\nCDSPopoverContent's shadowRoot.",
                "value": {}
              },
              {
                "name": "selectorPopoverContent",
                "description": "A selector that will return the CDSPopoverContent.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-pagination",
          "description": "Pagination UI.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-pages-select-changed** - The custom event fired after the current page is changed from `<cds-pages-select>`.\n- **cds-page-sizes-select-changed** - The custom event fired after the number of rows per page is changed from `<cds-page-sizes-select>`.\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **Slots:**\n - **page-sizes-select** - Where to put in the `<page-sizes-select>`.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "page-sizes-select",
              "description": "Where to put in the `<page-sizes-select>`."
            }
          ],
          "events": [
            {},
            {
              "name": "cds-pages-select-changed",
              "description": "The custom event fired after the current page is changed from `<cds-pages-select>`."
            },
            {
              "name": "cds-page-sizes-select-changed",
              "description": "The custom event fired after the number of rows per page is changed from `<cds-page-sizes-select>`."
            }
          ],
          "js": {
            "properties": [
              { "name": "_pageSizeSelect", "value": { "type": "HTMLElement" } },
              { "name": "_handleSlotChange", "value": {} },
              { "name": "_renderStatusText", "value": {} },
              {
                "name": "_handleUserInitiatedChangeStart",
                "description": "Handles user-initiated change in the row number the current page starts with.",
                "value": {}
              },
              {
                "name": "_handleClickPrevButton",
                "description": "Handles `click` event on the previous button.",
                "value": {}
              },
              {
                "name": "_handleClickNextButton",
                "description": "Handles `click` event on the next button.",
                "value": {}
              },
              {
                "name": "_handleChangeSelector",
                "description": "Handles user-initiated change in number of rows per page.",
                "value": {}
              },
              {
                "name": "backwardText",
                "description": "The assistive text for the button to go to previous page.",
                "value": { "type": "string" }
              },
              {
                "name": "page",
                "description": "The current page",
                "value": { "type": "number" }
              },
              {
                "name": "formatLabelText",
                "description": "The formatter for the assistive text for screen readers to announce.\nShould be changed upon the locale the UI is rendered with.",
                "value": {}
              },
              {
                "name": "formatStatusWithDeterminateTotal",
                "description": "The formatter, used with determinate the total pages. Should be changed upon the locale the UI is rendered with.",
                "value": {}
              },
              {
                "name": "formatStatusWithIndeterminateTotal",
                "description": "The formatter, used with indeterminate the total pages. Should be changed upon the locale the UI is rendered with.",
                "value": {}
              },
              {
                "name": "formatSupplementalText",
                "description": "The formatter for the text next to the select box. Should be changed upon the locale the UI is rendered with.",
                "value": {}
              },
              {
                "name": "isLastPage",
                "description": "`true` to explicitly state that user is at the last page.",
                "value": { "type": "boolean" }
              },
              {
                "name": "itemsPerPageText",
                "description": "The translatable text indicating the number of items per page.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "`true` if the pagination UI should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "forwardText",
                "description": "The assistive text for the button to go to next page.",
                "value": { "type": "string" }
              },
              {
                "name": "pageInputDisabled",
                "description": "true if the select box to change the page should be disabled.",
                "value": {}
              },
              {
                "name": "pageSize",
                "description": "Number of items per page.",
                "value": { "type": "number" }
              },
              {
                "name": "pageSizeInputDisabled",
                "description": "true if the select box to change the items per page should be disabled.",
                "value": {}
              },
              {
                "name": "pageSizeLabelText",
                "description": "The label text for the UI to select page size.",
                "value": { "type": "string" }
              },
              {
                "name": "pagesUnknown",
                "description": "true if the total number of items is unknown.",
                "value": { "type": "boolean" }
              },
              {
                "name": "size",
                "description": "Specify the size of the Pagination.",
                "value": {}
              },
              {
                "name": "start",
                "description": "The row number where current page start with, index that starts with zero.",
                "value": { "type": "number" }
              },
              {
                "name": "totalItems",
                "description": "The number of total items.",
                "value": { "type": "number" }
              },
              {
                "name": "totalPages",
                "description": "The number of total pages.",
                "value": { "type": "number" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorPagesSelect",
                "description": "A selector that will return the select box for the current page.",
                "value": {}
              },
              {
                "name": "selectorPageSizesSelect",
                "description": "A selector that will return the select box for page sizes.",
                "value": {}
              },
              {
                "name": "eventChangeCurrent",
                "description": "The name of the custom event fired after the current row number is changed.",
                "value": {}
              },
              {
                "name": "eventChangeSelect",
                "description": "The name of the custom event fired after the number of rows per page is changed from `<cds-page-sizes-select>`.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              {},
              {
                "name": "cds-pages-select-changed",
                "description": "The custom event fired after the current page is changed from `<cds-pages-select>`."
              },
              {
                "name": "cds-page-sizes-select-changed",
                "description": "The custom event fired after the number of rows per page is changed from `<cds-page-sizes-select>`."
              }
            ]
          }
        },
        {
          "name": "cds-progress-bar",
          "description": "Progress bar.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "helperText",
                "description": "The current progress as a textual representation.",
                "value": {}
              },
              {
                "name": "hideLabel",
                "description": "Whether the label should be visually hidden.",
                "value": {}
              },
              {
                "name": "label",
                "description": "A label describing the progress bar.",
                "value": {}
              },
              {
                "name": "max",
                "description": "The maximum value.",
                "value": { "type": "number" }
              },
              {
                "name": "size",
                "description": "Specify the size of the ProgressBar.",
                "value": {}
              },
              {
                "name": "status",
                "description": "Specify the status.",
                "value": {}
              },
              {
                "name": "type",
                "description": "Defines the alignment variant of the progress bar.",
                "value": {}
              },
              {
                "name": "value",
                "description": "The current value.",
                "value": {}
              },
              { "name": "_cappedValue", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-progress-indicator",
          "description": "Progress indicator.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "vertical",
                "description": "Determines whether or not the progress indicator should be rendered\nvertically.",
                "value": { "type": "boolean" }
              },
              {
                "name": "spaceEqually",
                "description": "Specify whether the progress steps should be split equally in size in the\ndiv",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorStep",
                "description": "A selector that will return progress steps.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-progress-step",
          "description": "Progress step.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **Slots:**\n - **secondary-label-text** - The secondary progress label.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "secondary-label-text",
              "description": "The secondary progress label."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "`true` if the progress step should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "iconLabel",
                "description": "The a11y text for the icon.",
                "value": { "type": "string" }
              },
              { "name": "description", "value": { "type": "string" } },
              {
                "name": "labelText",
                "description": "The primary progress label.",
                "value": { "type": "string" }
              },
              { "name": "label", "value": { "type": "string" } },
              {
                "name": "secondaryLabelText",
                "description": "The secondary progress label.",
                "value": { "type": "string" }
              },
              { "name": "secondaryLabel", "value": { "type": "string" } },
              {
                "name": "state",
                "description": "The progress state.",
                "value": {}
              },
              {
                "name": "vertical",
                "description": "`true` if the progress step should be vertical.",
                "value": { "type": "boolean" }
              },
              {
                "name": "spaceEqually",
                "description": "`true` if the progress step should be spaced equally.",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-radio-button-group",
          "description": "Radio button group.\n---\n\n\n### **Events:**\n - **cds-radio-button-group-changed** - The custom event fired after this radio button group changes its selected item.\n- **cds-radio-button-changed** - The name of the custom event fired after a radio button changes its checked state.\n\n### **Methods:**\n - **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-radio-button-group-changed",
              "description": "The custom event fired after this radio button group changes its selected item."
            },
            {
              "name": "cds-radio-button-changed",
              "description": "The name of the custom event fired after a radio button changes its checked state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_handleAfterChangeRadioButton",
                "description": "Handles user-initiated change in selected radio button.",
                "value": {}
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "defaultSelected",
                "description": "The `value` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "`true` if the radio button group should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "labelPosition",
                "description": "The label position.",
                "value": {}
              },
              {
                "name": "legendText",
                "description": "The label position.",
                "value": { "type": "string" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": {}
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              {
                "name": "invalid",
                "description": "Specify if the currently value is invalid.",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "The `name` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              {
                "name": "orientation",
                "description": "The orientation to lay out radio buttons.",
                "value": {}
              },
              {
                "name": "readOnly",
                "description": "Controls the readonly state of the radio button group.",
                "value": { "type": "boolean" }
              },
              {
                "name": "value",
                "description": "The `value` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorRadioButton",
                "description": "A selector that will return the radio buttons.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired after this radio button group changes its selected item.",
                "value": {}
              },
              {
                "name": "eventChangeRadioButton",
                "description": "The name of the custom event fired after a radio button changes its checked state.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              {
                "name": "cds-radio-button-group-changed",
                "description": "The custom event fired after this radio button group changes its selected item."
              },
              {
                "name": "cds-radio-button-changed",
                "description": "The name of the custom event fired after a radio button changes its checked state."
              }
            ]
          }
        },
        {
          "name": "cds-radio-button",
          "description": "Radio button.\n---\n\n\n### **Events:**\n - **cds-radio-button-changed** - The custom event fired after this radio button changes its checked state.\n\n### **Methods:**\n \n- **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-radio-button-changed",
              "description": "The custom event fired after this radio button changes its checked state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_manager",
                "description": "The radio group manager associated with the radio button.",
                "value": { "type": "RadioGroupManager | null" }
              },
              {
                "name": "_radioButtonDelegate",
                "description": "The interface for `RadioGroupManager` for radio button.",
                "value": { "type": "RadioButtonDelegate" }
              },
              {
                "name": "_inputNode",
                "description": "The hidden radio button.",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on this element.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "checked",
                "description": "`true` if this radio button should be checked.",
                "value": { "type": "boolean" }
              },
              {
                "name": "dataTable",
                "description": "`true` if the radio button is used in a data table",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabledItem",
                "description": "`true` if the radio button item should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "`true` if the radio button group should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hideLabel",
                "description": "`true` if the label should be hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalid",
                "description": "Specify if the currently value is invalid.",
                "value": { "type": "boolean" }
              },
              {
                "name": "labelPosition",
                "description": "The label position.",
                "value": {}
              },
              {
                "name": "labelText",
                "description": "The label text.",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "The `name` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              {
                "name": "orientation",
                "description": "The orientation to lay out radio buttons.",
                "value": {}
              },
              {
                "name": "readOnly",
                "description": "`true` if the radio button group should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "value",
                "description": "The `value` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              { "name": "firstUpdated", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired after this radio button changes its checked state.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "cds-radio-button-changed",
                "description": "The custom event fired after this radio button changes its checked state."
              }
            ]
          }
        },
        {
          "name": "cds-search",
          "description": "Search box.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-search-input** - The custom event fired after the search content is changed upon a user gesture.\n\n### **Methods:**\n - **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **search-icon** - The search icon.\n- **label-text** - The label text.\n- **input** - The input box.\n- **close-button** - The close button.\n- **close-icon** - The close icon.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-search-input",
              "description": "The custom event fired after the search content is changed upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_handleInput",
                "description": "Handles `input` event on the `<input>` in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleClearInputButtonClick",
                "description": "Handles `click` event on the button to clear search box content.",
                "value": {}
              },
              {
                "name": "_handleExpand",
                "description": "Handles `focus` event on the button when the button can be expanded",
                "value": {}
              },
              {
                "name": "_handleClose",
                "description": "Handles `focusout` event on the component to be closed after being expanded\nWill not close if there is a value typed within.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handler for",
                "value": {}
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "autoComplete",
                "description": "Specify an optional value for the autocomplete property on the underlying <input>,\ndefaults to \"off\"",
                "value": { "type": "string" }
              },
              {
                "name": "closeButtonLabelText",
                "description": "Specify a label to be read by screen readers on the \"close\" button",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "`true` if the search box should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "expandable",
                "description": "`true` if the search bar can be expandable",
                "value": { "type": "boolean" }
              },
              {
                "name": "expanded",
                "description": "`true` if the expandable search has been expanded",
                "value": { "type": "boolean" }
              },
              { "name": "hasCustomIcon", "value": { "type": "boolean" } },
              {
                "name": "labelText",
                "description": "The label text.",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "The form name in `FormData`.",
                "value": { "type": "string" }
              },
              {
                "name": "role",
                "description": "Specify the role for the underlying <input>, defaults to searchbox",
                "value": { "type": "string" }
              },
              {
                "name": "placeholder",
                "description": "The placeholder text.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "The search box size.",
                "value": {}
              },
              {
                "name": "type",
                "description": "The `<input>` name.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "eventInput",
                "description": "The name of the custom event fired after the search content is changed upon a user gesture.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              }
            ],
            "events": [
              {},
              {
                "name": "cds-search-input",
                "description": "The custom event fired after the search content is changed upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-select-item-group",
          "description": "An option group in select box.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "`true` to disable this option.",
                "value": { "type": "boolean" }
              },
              {
                "name": "label",
                "description": "The label.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-select-item",
          "description": "An option in select box.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "`true` to disable this option.",
                "value": { "type": "boolean" }
              },
              {
                "name": "label",
                "description": "The label. If this is not specified, the child text content is used.",
                "value": { "type": "string" }
              },
              {
                "name": "selected",
                "description": "`true` to select this option.",
                "value": { "type": "boolean" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-select",
          "description": "Select box.\n---\n\n\n### **Events:**\n - **eventSelect** - undefined\n- **cds-select-selected** - The name of the custom event fired after an item is selected.\n\n### **Methods:**\n - **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n\n\n### **Slots:**\n - **helper-text** - The helper text.\n- **label-text** - The label text.\n- **validity-message** - The validity message. If present and non-empty, this input shows the UI of its invalid state.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "helper-text", "description": "The helper text." },
            { "name": "label-text", "description": "The label text." },
            {
              "name": "validity-message",
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state."
            }
          ],
          "events": [
            { "name": "eventSelect" },
            {
              "name": "cds-select-selected",
              "description": "The name of the custom event fired after an item is selected."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_observerMutation",
                "description": "The mutation observer DOM mutation.",
                "value": { "type": "MutationObserver | null" }
              },
              {
                "name": "_placeholderItemValue",
                "description": "The `value` for placeholder `<option>`.",
                "value": {}
              },
              {
                "name": "_selectNode",
                "description": "The select box.",
                "value": { "type": "HTMLSelectElement" }
              },
              {
                "name": "_handleInput",
                "description": "Handles `oninput` event on the `<input>`.",
                "value": {}
              },
              {
                "name": "_handleMutation",
                "description": "Handles DOM mutation of `<cds-select-item>` or `<cds-select-item-group>` put in `<cds-select>`, or their changes.\nIn such event, `<cds-select>` creates the corresponding `<option>` and `<optgroup>`, respectively, into shadow DOM,\nwith `._renderItems()`.\nDoing so allows the shadow DOM style of `<cds-select>` to control the style of the `<option>` and `<optgroup>`,\nnotably the disabled ones.",
                "value": {}
              },
              { "name": "_renderItems", "value": {} },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "_handleSlugSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "length",
                "description": "The count of child `<option>`s.\nIf the placeholder is in effect, it includes the `<option>` for the placeholder.",
                "value": {}
              },
              {
                "name": "options",
                "description": "The child `<option>`s.",
                "value": {}
              },
              {
                "name": "type",
                "description": "This form control's type.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "Sets the select to be focussed automatically on page load. Defaults to false",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Controls the disabled state of the select",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether the label should be hidden, or not",
                "value": { "type": "boolean" }
              },
              {
                "name": "id",
                "description": "ID to link the `label` and `select`",
                "value": { "type": "string" }
              },
              {
                "name": "invalid",
                "description": "Specify if the currently value is invalid.",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "warn",
                "description": "Specify if the currently value is warn.",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Message which is displayed if the value is warn.",
                "value": { "type": "string" }
              },
              {
                "name": "labelText",
                "description": "The label text.",
                "value": { "type": "string" }
              },
              {
                "name": "inline",
                "description": "Specify whether you want the inline version of this control",
                "value": { "type": "boolean" }
              },
              {
                "name": "multiple",
                "description": "`true` to enable multiple selection.",
                "value": {}
              },
              {
                "name": "name",
                "description": "Name for the select in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "pattern",
                "description": "Pattern to validate the select against for HTML validity checking",
                "value": { "type": "string" }
              },
              {
                "name": "placeholder",
                "description": "Value to display when the select has an empty `value`",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Controls the readonly state of the select",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Boolean property to set the required status",
                "value": { "type": "boolean" }
              },
              {
                "name": "requiredValidityMessage",
                "description": "The special validity message for `required`.",
                "value": { "type": "string" }
              },
              {
                "name": "selectedIndex",
                "description": "The selected index.",
                "value": {}
              },
              {
                "name": "size",
                "description": "The input box size.",
                "value": {}
              },
              {
                "name": "value",
                "description": "The value of the text area.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorItem",
                "description": "A selector selecting child pseudo `<optgroup>`/`<option>`.",
                "value": {}
              },
              {
                "name": "selectorLeafItem",
                "description": "A selector selecting child pseudo `<option>`.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              {
                "name": "eventSelect",
                "description": "The name of the custom event fired after item is selected.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              }
            ],
            "events": [
              { "name": "eventSelect" },
              {
                "name": "cds-select-selected",
                "description": "The name of the custom event fired after an item is selected."
              }
            ]
          }
        },
        {
          "name": "cds-side-panel",
          "description": "SidePanel.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-side-panel-beingclosed** - The custom event fired before this side-panel is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this side-panel.\n- **cds-side-panel-closed** - The custom event fired after this side-panel is closed upon a user gesture.\n- **cds-side-panel-navigate-back** - custom event fired when clicking navigate back (available when step > 0)\n\n### **CSS Parts:**\n - **dialog** - The dialog.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-side-panel-beingclosed",
              "description": "The custom event fired before this side-panel is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this side-panel."
            },
            {
              "name": "cds-side-panel-closed",
              "description": "The custom event fired after this side-panel is closed upon a user gesture."
            },
            {
              "name": "cds-side-panel-navigate-back",
              "description": "custom event fired when clicking navigate back (available when step > 0)"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_hObserveResize",
                "description": "The handle for observing resize of the parent element of this element.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_launcher",
                "description": "The element that had focus before this side-panel gets open.",
                "value": { "type": "Element | null" }
              },
              {
                "name": "_startSentinelNode",
                "description": "Node to track focus going outside of side-panel content.",
                "value": { "type": "HTMLAnchorElement" }
              },
              {
                "name": "_endSentinelNode",
                "description": "Node to track focus going outside of side-panel content.",
                "value": { "type": "HTMLAnchorElement" }
              },
              {
                "name": "_sidePanel",
                "description": "Node to track side panel.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_animateScrollWrapper",
                "value": { "type": "HTMLElement | undefined" }
              },
              { "name": "_label", "value": { "type": "HTMLElement" } },
              { "name": "_title", "value": { "type": "HTMLElement" } },
              { "name": "_subtitle", "value": { "type": "HTMLElement" } },
              { "name": "_innerContent", "value": { "type": "HTMLElement" } },
              { "name": "_actions", "value": { "type": "Array<HTMLElement>" } },
              { "name": "_doAnimateTitle", "value": { "type": "boolean" } },
              { "name": "_isOpen", "value": { "type": "boolean" } },
              { "name": "_containerScrollTop", "value": { "type": "number" } },
              { "name": "_hasSubtitle", "value": { "type": "boolean" } },
              { "name": "_hasSlug", "value": { "type": "boolean" } },
              { "name": "_hasActionToolbar", "value": { "type": "boolean" } },
              { "name": "_actionsCount", "value": { "type": "number" } },
              { "name": "_slugCloseSize", "value": { "type": "string" } },
              {
                "name": "_handleBlur",
                "description": "Handles `blur` event on this element.",
                "value": {}
              },
              { "name": "_handleKeydown", "value": {} },
              { "name": "_reducedMotion", "value": {} },
              {
                "name": "_handleClickOnOverlay",
                "description": "Handles `click` event on the side-panel container.",
                "value": {}
              },
              {
                "name": "_handleCloseClick",
                "description": "Handles `click` event on the side-panel container.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedClose",
                "description": "Handles user-initiated close request of this side-panel.",
                "value": {}
              },
              { "name": "_handleNavigateBack", "value": {} },
              { "name": "_adjustPageContent", "value": {} },
              { "name": "_checkSetOpen", "value": {} },
              { "name": "_checkUpdateIconButtonSizes", "value": {} },
              { "name": "_handleSlugChange", "value": {} },
              { "name": "_handleSubtitleChange", "value": {} },
              { "name": "_handleActionToolbarChange", "value": {} },
              { "name": "_checkUpdateActionSizes", "value": {} },
              { "name": "_maxActions", "value": { "type": "number" } },
              { "name": "_handleActionsChange", "value": {} },
              { "name": "_checkSetDoAnimateTitle", "value": {} },
              {
                "name": "_resizeObserver",
                "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position.",
                "value": {}
              },
              { "name": "_getScrollAnimationDistance", "value": {} },
              { "name": "_scrollObserver", "value": {} },
              { "name": "_handleCurrentStepUpdate", "value": {} },
              {
                "name": "animateTitle",
                "description": "Determines if the title will animate on scroll",
                "value": { "type": "boolean" }
              },
              {
                "name": "closeIconDescription",
                "description": "Sets the close button icon description",
                "value": { "type": "string" }
              },
              {
                "name": "condensedActions",
                "description": "Determines whether the side panel should render the condensed version (affects action buttons primarily)",
                "value": { "type": "boolean" }
              },
              {
                "name": "currentStep",
                "description": "Sets the current step of the side panel",
                "value": {}
              },
              {
                "name": "includeOverlay",
                "description": "Determines whether the side panel should render with an overlay",
                "value": { "type": "boolean" }
              },
              {
                "name": "labelText",
                "description": "Sets the label text which will display above the title text",
                "value": {}
              },
              {
                "name": "navigationBackIconDescription",
                "description": "Sets the icon description for the navigation back icon button",
                "value": { "type": "string" }
              },
              {
                "name": "open",
                "description": "`true` if the side-panel should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "placement",
                "description": "SidePanel placement.",
                "value": {}
              },
              {
                "name": "preventCloseOnClickOutside",
                "description": "Prevent closing on click outside of side-panel",
                "value": { "type": "boolean" }
              },
              {
                "name": "selectorInitialFocus",
                "description": "The initial location of focus in the side panel",
                "value": {}
              },
              {
                "name": "selectorPageContent",
                "description": "Selector for page content, used to push content to side except",
                "value": { "type": "string" }
              },
              { "name": "size", "description": "SidePanel size.", "value": {} },
              {
                "name": "slideIn",
                "description": "Determines if this panel slides in",
                "value": { "type": "boolean" }
              },
              {
                "name": "title",
                "description": "Sets the title text",
                "value": {}
              },
              { "name": "connectObservers", "value": {} },
              { "name": "disconnectObservers", "value": {} },
              { "name": "render", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "_delay", "value": {} },
              {
                "name": "selectorTabbable",
                "description": "A selector selecting tabbable nodes.",
                "value": {}
              },
              {
                "name": "eventBeforeClose",
                "description": "The name of the custom event fired before this side-panel is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this side-panel.",
                "value": {}
              },
              {
                "name": "eventClose",
                "description": "The name of the custom event fired after this side-panel is closed upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventNavigateBack",
                "description": "The name of the custom event fired on clicking the navigate back button",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              {},
              {
                "name": "cds-side-panel-beingclosed",
                "description": "The custom event fired before this side-panel is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this side-panel."
              },
              {
                "name": "cds-side-panel-closed",
                "description": "The custom event fired after this side-panel is closed upon a user gesture."
              },
              {
                "name": "cds-side-panel-navigate-back",
                "description": "custom event fired when clicking navigate back (available when step > 0)"
              }
            ]
          }
        },
        {
          "name": "cds-skeleton-icon",
          "description": "Skeleton icon.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [{ "name": "styles", "value": {} }],
            "events": []
          }
        },
        {
          "name": "cds-skeleton-placeholder",
          "description": "Skeleton placeholder.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "optionalClasses",
                "description": "Specify optional classes to be added to your SkeletonText",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-skeleton-text",
          "description": "Skeleton text.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "optionalClasses",
                "description": "Specify optional classes to be added to your SkeletonText",
                "value": {}
              },
              {
                "name": "type",
                "description": "The type of skeleton text.",
                "value": {}
              },
              {
                "name": "width",
                "description": "width (in px or %) of single line of text or max-width of paragraph lines",
                "value": { "type": "string" }
              },
              {
                "name": "paragraph",
                "description": "will generate multiple lines of text",
                "value": { "type": "boolean" }
              },
              {
                "name": "lineCount",
                "description": "the number of lines in a paragraph",
                "value": { "type": "number" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-skip-to-content",
          "description": "Skip-to-content link.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "linkAssisstiveText",
                "description": "The assistive text for the link,",
                "value": { "type": "string" }
              },
              {
                "name": "href",
                "description": "The skip link href.",
                "value": { "type": "string | undefined" }
              },
              { "name": "render", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-slider-input",
          "description": "The `<input>` box for slider.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-slider-input-changed** - The custom event fired after the value is changed by user gesture.\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-slider-input-changed",
              "description": "The custom event fired after the value is changed by user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_max",
                "description": "The internal value of `max` property.",
                "value": { "type": "string" }
              },
              {
                "name": "_min",
                "description": "The internal value of `min` property.",
                "value": { "type": "string" }
              },
              {
                "name": "_step",
                "description": "The internal value of `step` property.",
                "value": { "type": "string" }
              },
              {
                "name": "_handleChange",
                "description": "Handles `change` event to fire a normalized custom event.",
                "value": {}
              },
              {
                "name": "_handleInput",
                "description": "Handles `input` event to fire a normalized custom event.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the input should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalid",
                "description": "true to specify if the control is invalid.",
                "value": { "type": "boolean" }
              },
              {
                "name": "warn",
                "description": "true to specify if the control should display warn icon and text.",
                "value": { "type": "boolean" }
              },
              {
                "name": "max",
                "description": "The maximum value.",
                "value": {}
              },
              {
                "name": "min",
                "description": "The minimum value.",
                "value": {}
              },
              {
                "name": "step",
                "description": "The snapping step of the value.",
                "value": {}
              },
              {
                "name": "type",
                "description": "The type of the `<input>`.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "number" }
              },
              {
                "name": "readonly",
                "description": "true` if the input should be readonly.",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              {
                "name": "selectorParent",
                "description": "A selector that will return the parent slider.",
                "value": {}
              },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired after the value is changed by user gesture.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {},
              {
                "name": "cds-slider-input-changed",
                "description": "The custom event fired after the value is changed by user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-slider",
          "description": "Slider.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-slider-input-changed** - The name of the custom event fired after the value is changed in `<cds-slider-input>` by user gesture.\n- **cds-slider-changed** - The custom event fired after the value is changed by user gesture.\n\n### **Methods:**\n - **_handleClickLabel()** - Handles `click` event on the `<label>` to focus on the thumb.\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **Slots:**\n - **label-text** - The label text.\n- **max-text** - The text for maximum value.\n- **min-text** - The text for minimum value.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "label-text", "description": "The label text." },
            {
              "name": "max-text",
              "description": "The text for maximum value."
            },
            { "name": "min-text", "description": "The text for minimum value." }
          ],
          "events": [
            {},
            {
              "name": "cds-slider-input-changed",
              "description": "The name of the custom event fired after the value is changed in `<cds-slider-input>` by user gesture."
            },
            {
              "name": "cds-slider-changed",
              "description": "The custom event fired after the value is changed by user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_max",
                "description": "The internal value of `max` property.",
                "value": { "type": "string" }
              },
              {
                "name": "_min",
                "description": "The internal value of `min` property.",
                "value": { "type": "string" }
              },
              {
                "name": "_step",
                "description": "The internal value of `step` property.",
                "value": { "type": "string" }
              },
              {
                "name": "_stepMultiplier",
                "description": "The internal value of `stepMultiplier` property.",
                "value": { "type": "string" }
              },
              {
                "name": "_throttledHandlePointermoveImpl",
                "description": "The handle for the throttled listener of `pointermove` event.",
                "value": {
                  "type": "| (((event: PointerEvent) => void) & Cancelable)\n    | null"
                }
              },
              {
                "name": "_dragging",
                "description": "`true` if dragging of thumb is in progress.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_rate",
                "description": "The rate of the thumb position in the track.\nWhen we try to set a new value, we adjust the value considering `step` property.",
                "value": {}
              },
              {
                "name": "_thumbNode",
                "description": "The DOM element of the thumb.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_trackNode",
                "description": "The DOM element of the track.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_handleClickLabel",
                "description": "Handles `click` event on the `<label>` to focus on the thumb.",
                "value": {}
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on the thumb to increase/decrease the value.",
                "value": {}
              },
              {
                "name": "_startDrag",
                "description": "Handles `pointerdown` event on the thumb to start dragging.",
                "value": {}
              },
              {
                "name": "_handleClick",
                "description": "Handles `pointerdown` event on the track to update the thumb position and the value as necessary.",
                "value": {}
              },
              {
                "name": "_handlePointermove",
                "description": "Handles `pointermove` to update the thumb position and the value as necessary.",
                "value": {}
              },
              {
                "name": "_handlePointermoveImpl",
                "description": "Updates thumb position and value upon user's `pointermove` gesture.",
                "value": {}
              },
              {
                "name": "_endDrag",
                "description": "Handles `pointerup` and `pointerleave` event to finishing dragging.",
                "value": {}
              },
              {
                "name": "_handleChangeInput",
                "description": "Handles `${prefix}-slider-input-changed` event to update the value.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the check box should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "true to specify if the control is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Whether the slider should be read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "labelText",
                "description": "The label text.",
                "value": { "type": "string" }
              },
              {
                "name": "maxLabel",
                "description": "The label associated with the maximum value.",
                "value": { "type": "string" }
              },
              {
                "name": "minLabel",
                "description": "The label associated with the minimum value.",
                "value": { "type": "string" }
              },
              {
                "name": "formatMaxText",
                "description": "The formatter for the text for maximum value.\nShould be changed upon the locale the UI is rendered with.",
                "value": {}
              },
              {
                "name": "formatMinText",
                "description": "The formatter for the text for min/max value.\nShould be changed upon the locale the UI is rendered with.",
                "value": {}
              },
              {
                "name": "max",
                "description": "The maximum value.",
                "value": {}
              },
              {
                "name": "min",
                "description": "The minimum value.",
                "value": {}
              },
              {
                "name": "name",
                "description": "The form name.",
                "value": { "type": "string" }
              },
              {
                "name": "invalid",
                "description": "true to specify if the control is invalid.",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "warn",
                "description": "true to specify if the control should display warn icon and text.",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              {
                "name": "step",
                "description": "The snapping step of the value.",
                "value": {}
              },
              {
                "name": "stepMultiplier",
                "description": "A value determining how much the value should increase/decrease by Shift+arrow keys,\nwhich will be `(max - min) / stepMultiplier`.",
                "value": {}
              },
              { "name": "value", "description": "The value.", "value": {} },
              {
                "name": "isValid",
                "description": "is slide input valid",
                "value": {}
              },
              { "name": "_getInputValidity", "value": {} },
              { "name": "shouldUpdate", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorInput",
                "description": "A selector that will return the `<input>` box got entering the value directly.",
                "value": {}
              },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired after the value is changed by user gesture.",
                "value": {}
              },
              {
                "name": "eventChangeInput",
                "description": "The name of the custom event fired after the value is changed in `<cds-slider-input>` by user gesture.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {},
              {
                "name": "cds-slider-input-changed",
                "description": "The name of the custom event fired after the value is changed in `<cds-slider-input>` by user gesture."
              },
              {
                "name": "cds-slider-changed",
                "description": "The custom event fired after the value is changed by user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-slug-action-button",
          "description": "Slug action button.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "slot",
                "description": "The shadow slot this slug-action should be in.",
                "value": { "type": "string" }
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Button size.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-slug",
          "description": "Basic slug.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "slot", "value": { "type": "string" } },
              {
                "name": "aiText",
                "description": "Specify the correct translation of the AI text",
                "value": { "type": "string" }
              },
              {
                "name": "aiTextLabel",
                "description": "Specify additional text to be rendered next to the AI label in the inline variant",
                "value": { "type": "string" }
              },
              {
                "name": "kind",
                "description": "Specify the type of Slug, from the following list of types: (default, inline)",
                "value": {}
              },
              {
                "name": "revertActive",
                "description": "Specify whether the revert button should be visible",
                "value": { "type": "boolean" }
              },
              {
                "name": "revertLabel",
                "description": "Specify whether the revert button should be visible",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Slug size should be mini, 2xs, xs, sm, md, lg, xl.",
                "value": {}
              },
              {
                "name": "slugLabel",
                "description": "Specify the text that will be provided to the aria-label of the `Slug` button",
                "value": { "type": "string" }
              },
              { "name": "previousValue", "value": {} },
              { "name": "_handleClick", "value": {} },
              { "name": "_renderToggleTipLabel", "value": {} },
              { "name": "_renderTooltipButton", "value": {} },
              { "name": "_renderInnerContent", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-stack",
          "description": "The Stack component is a useful layout utility in a component-based model.\nThis allows components to not use margin and instead delegate the\nresponsibility of positioning and layout to parent components.\n\nIn the case of the Stack component, it uses the spacing scale from the\nDesign Language in order to determine how much space there should be between\nitems rendered by the Stack component. It also supports a custom `gap` prop\nwhich will allow a user to provide a custom value for the gap of the layout.\n\nThis component supports both horizontal and vertical orientations.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "orientation",
                "description": "Specify the orientation of them items in the Stack",
                "value": {}
              },
              {
                "name": "gap",
                "description": "Provide either a custom value or a step from the spacing scale to be used\nas the gap in the layout",
                "value": {}
              },
              {
                "name": "useCustomGapValue",
                "description": "Turn on when passing in custom value to 'gap' attribute (ie. gap=\"2rem\")",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-structured-list-body",
          "description": "Structured list body.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-structured-list-cell",
          "description": "Structured list cell.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-structured-list-head",
          "description": "Structured list header.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-structured-list-header-cell",
          "description": "Structured list header cell.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-structured-list-header-row",
          "description": "Structured list header row.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "selectionName",
                "description": "The `name` attribute for the `<input>` for selection.\nIf present, this structured list header row will show its selectable version of the UI.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-structured-list-row",
          "description": "Structured list row.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_manager",
                "description": "The radio group manager associated with the radio button.",
                "value": { "type": "RadioGroupManager | null" }
              },
              {
                "name": "_radioButtonDelegate",
                "description": "The interface for `RadioGroupManager` for structured list row.",
                "value": {}
              },
              {
                "name": "_inputNode",
                "description": "The hidden radio button.",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on this element.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "selected",
                "description": "`true` if this structured list row should be selectable and selected.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selectionName",
                "description": "The `name` attribute for the `<input>` for selection.\nIf present, this structured list row will be a selectable one.",
                "value": { "type": "string" }
              },
              {
                "name": "selectionValue",
                "description": "The `value` attribute for the `<input>` for selection.",
                "value": { "type": "string" }
              },
              {
                "name": "selectionIconTitle",
                "description": "The content to put into the `<title>` attribute of the selection icon.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-structured-list",
          "description": "Structured list wrapper.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "selectionName",
                "description": "The `name` attribute for the `<input>` for selection.\nIf present, this structured list will be a selectable one.",
                "value": { "type": "string" }
              },
              {
                "name": "condensed",
                "description": "Specify if structured list is condensed, default is false",
                "value": { "type": "boolean" }
              },
              {
                "name": "flush",
                "description": "Specify if structured list is flush, default is false",
                "value": { "type": "boolean" }
              },
              { "name": "shouldUpdate", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorRowsWithHeader",
                "description": "The CSS selector to find the rows, including header rows.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-tab",
          "description": "Basic tab.\n---\n\n\n### **Methods:**\n \n- **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "highlighted",
                "description": "`true` if this tab should be highlighted.\nIf `true`, parent `<cds-tabs>` selects/deselects this tab upon keyboard interaction.",
                "value": { "type": "boolean" }
              },
              { "name": "type", "description": "Tab type.", "value": {} },
              {
                "name": "tabTitle",
                "description": "The tab text content.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if this content switcher item should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hideDivider",
                "description": "`true` to hide the divider at the left.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "`true` if the content switcher button should be selected.",
                "value": { "type": "boolean" }
              },
              {
                "name": "target",
                "description": "The element ID of target panel.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The `value` attribute that is set to the parent `<cds-content-switcher>`\nwhen this content switcher item is selected.",
                "value": { "type": "string" }
              },
              {
                "name": "icon",
                "description": "`true` if the content switcher button should be icon-only.",
                "value": { "type": "boolean" }
              },
              {
                "name": "align",
                "description": "Specify how the trigger should align with the tooltip for icon-only\nswitcher item",
                "value": { "type": "string" }
              },
              {
                "name": "closeOnActivation",
                "description": "Determines whether the tooltip should close when inner content is\nactivated (click, Enter or Space)",
                "value": { "type": "boolean" }
              },
              {
                "name": "enterDelayMs",
                "description": "Specify the duration in milliseconds to delay before displaying the\ntooltip for icon-only switcher item",
                "value": { "type": "number" }
              },
              {
                "name": "leaveDelayMs",
                "description": "Specify the duration in milliseconds to delay before hiding the tooltip\nfor icon-only switcher-item\n\nTODO: match upstream value once #10471 is resolved",
                "value": { "type": "number" }
              },
              { "name": "updated", "value": {} },
              { "name": "_renderTooltipContent", "value": {} },
              { "name": "shouldUpdate", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-tabs",
          "description": "Tabs.\n---\n\n\n### **Events:**\n - **cds-tabs-beingselected** - The custom event fired before a tab is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-tabs-selected** - The custom event fired after a a tab is selected upon a user gesture.\n- **cds-content-switcher-beingselected** - The custom event fired before a content switcher item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-content-switcher-selected** - The custom event fired after a a content switcher item is selected upon a user gesture.\n\n### **Methods:**\n \n\n\n\n\n\n\n",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-tabs-beingselected",
              "description": "The custom event fired before a tab is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-tabs-selected",
              "description": "The custom event fired after a a tab is selected upon a user gesture."
            },
            {
              "name": "cds-content-switcher-beingselected",
              "description": "The custom event fired before a content switcher item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-content-switcher-selected",
              "description": "The custom event fired after a a content switcher item is selected upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_assistiveStatusText",
                "description": "The latest status of this dropdown, for screen reader to accounce.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "_currentIndex",
                "description": "The currently selected index",
                "value": { "type": "number" }
              },
              {
                "name": "_totalTabs",
                "description": "Total number of tabs in the component",
                "value": { "type": "number" }
              },
              {
                "name": "_isScrollable",
                "description": "`true` if the tablist is scrollable",
                "value": { "type": "boolean" }
              },
              {
                "name": "tablist",
                "description": "The DOM element for the tablist.",
                "value": { "type": "Element | null" }
              },
              {
                "name": "BUTTON_WIDTH",
                "description": "The width of the overflow scroll buttons.",
                "value": { "type": "number" }
              },
              {
                "name": "_navigate",
                "description": "Navigates through tabs.",
                "value": {}
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on content switcher item.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleScrollButtonClick",
                "description": "Handles click on overflow scroll buttons.",
                "value": {}
              },
              { "name": "_handleSlotchange", "value": {} },
              {
                "name": "_selectionDidChange",
                "description": "A callback that runs after change in content switcher selection upon user interaction is confirmed.",
                "value": {}
              },
              {
                "name": "_contentContainerNode",
                "description": "The scrolling container.",
                "value": { "type": "HTMLElement | undefined" }
              },
              {
                "name": "_contentNode",
                "description": "The scrolling content.",
                "value": { "type": "HTMLElement | undefined" }
              },
              {
                "name": "_currentScrollPosition",
                "description": "The current scroll position.",
                "value": { "type": "number" }
              },
              {
                "name": "_intersectionLeftSentinelNode",
                "description": "The left-hand sentinel to track intersection with the host element.\nIf they intersect, the left-hand paginator button should be hidden.",
                "value": { "type": "HTMLElement | undefined" }
              },
              {
                "name": "_intersectionRightSentinelNode",
                "description": "The right-hand sentinel to track intersection with the host element.\nIf they intersect, the right-hand paginator button should be hidden.",
                "value": { "type": "HTMLElement | undefined" }
              },
              {
                "name": "selectingItemsAssistiveText",
                "description": "An assistive text for screen reader to announce, telling the open state.",
                "value": { "type": "string" }
              },
              {
                "name": "selectedItemAssistiveText",
                "description": "An assistive text for screen reader to announce, telling that an item is selected.",
                "value": { "type": "string" }
              },
              {
                "name": "triggerContent",
                "description": "The content of the trigger button for narrow mode.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Tabs type.", "value": {} },
              {
                "name": "_isIntersectionLeftTrackerInContent",
                "description": "`true` if left-hand scroll intersection sentinel intersects with the host element.\nIn this condition, the left-hand paginator button should be hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_isIntersectionRightTrackerInContent",
                "description": "`true` if right-hand scroll intersection sentinel intersects with the host element.\nIn this condition, the right-hand paginator button should be hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_observerIntersection",
                "description": "The observer for the intersection of left-side content edge.",
                "value": { "type": "IntersectionObserver | null" }
              },
              {
                "name": "_observeIntersectionContainer",
                "description": "The intersection observer callback for the scrolling container.",
                "value": {}
              },
              {
                "name": "_cleanAndCreateIntersectionObserverContainer",
                "description": "Cleans-up and creates the intersection observer for the scrolling container.",
                "value": {}
              },
              { "name": "shouldUpdate", "value": {} },
              { "name": "firstUpdated", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "renderPreviousButton",
                "description": "Render the previous button if tablist is wider than container.",
                "value": {}
              },
              {
                "name": "renderNextButton",
                "description": "Render the next button if tablist is wider than container.",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "TRIGGER_KEYS",
                "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item.",
                "value": {}
              },
              {
                "name": "selectorItem",
                "description": "A selector that will return tabs.",
                "value": {}
              },
              {
                "name": "selectorItemEnabled",
                "description": "A selector that will return enabled tabs.",
                "value": {}
              },
              {
                "name": "selectorItemHighlighted",
                "description": "A selector that will return highlighted tabs.",
                "value": {}
              },
              {
                "name": "selectorItemSelected",
                "description": "A selector that will return selected tabs.",
                "value": {}
              },
              {
                "name": "selectorTablist",
                "description": "A selector that returns the tablist",
                "value": {}
              },
              {
                "name": "eventBeforeSelect",
                "description": "The name of the custom event fired before a tab is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
                "value": {}
              },
              {
                "name": "eventSelect",
                "description": "The name of the custom event fired after a a tab is selected upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              { "name": "getAction", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "_handleHover",
                "description": "Handles `mouseover`/`mouseout` events on `<slot>`.",
                "value": {}
              },
              { "name": "_getCurrentItem", "value": {} },
              { "name": "_getNextItem", "value": {} },
              {
                "name": "_handleUserInitiatedSelectItem",
                "description": "Handles user-initiated selection of a content switcher item.",
                "value": {}
              },
              {
                "name": "value",
                "description": "The value of the selected item.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Content switcher size.",
                "value": {}
              },
              {
                "name": "iconOnly",
                "description": "Icon only.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selectorIconItem",
                "description": "A selector that will return content switcher icon items.",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "cds-tabs-beingselected",
                "description": "The custom event fired before a tab is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-tabs-selected",
                "description": "The custom event fired after a a tab is selected upon a user gesture."
              },
              {
                "name": "cds-content-switcher-beingselected",
                "description": "The custom event fired before a content switcher item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-content-switcher-selected",
                "description": "The custom event fired after a a content switcher item is selected upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-tearsheet",
          "description": "Tearsheet.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-tearsheet-beingclosed** - The custom event fired before this tearsheet is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this tearsheet.\n- **cds-tearsheet-closed** - The custom event fired after this tearsheet is closed upon a user gesture.\n\n### **CSS Parts:**\n - **dialog** - The dialog.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-tearsheet-beingclosed",
              "description": "The custom event fired before this tearsheet is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this tearsheet."
            },
            {
              "name": "cds-tearsheet-closed",
              "description": "The custom event fired after this tearsheet is closed upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_launcher",
                "description": "The element that had focus before this tearsheet gets open.",
                "value": { "type": "Element | null" }
              },
              {
                "name": "_startSentinelNode",
                "description": "Node to track focus going outside of tearsheet content.",
                "value": { "type": "HTMLAnchorElement" }
              },
              {
                "name": "_endSentinelNode",
                "description": "Node to track focus going outside of tearsheet content.",
                "value": { "type": "HTMLAnchorElement" }
              },
              {
                "name": "_tearsheet",
                "description": "Node to track tearsheet.",
                "value": { "type": "HTMLDivElement" }
              },
              { "name": "_actions", "value": { "type": "Array<HTMLElement>" } },
              { "name": "_actionsCount", "value": { "type": "number" } },
              { "name": "_hasHeaderActions", "value": { "type": "boolean" } },
              { "name": "_hasLabel", "value": { "type": "boolean" } },
              { "name": "_hasSlug", "value": { "type": "boolean" } },
              { "name": "_hasTitle", "value": { "type": "boolean" } },
              { "name": "_hasDescription", "value": { "type": "boolean" } },
              { "name": "_hasInfluencerLeft", "value": { "type": "boolean" } },
              { "name": "_hasInfluencerRight", "value": { "type": "boolean" } },
              { "name": "_isOpen", "value": { "type": "boolean" } },
              {
                "name": "_hasHeaderNavigation",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on this element.",
                "value": {}
              },
              {
                "name": "_handleBlur",
                "description": "Handles `blur` event on this element.",
                "value": {}
              },
              { "name": "_handleKeydown", "value": {} },
              { "name": "_checkSetHasSlot", "value": {} },
              {
                "name": "_handleClickContainer",
                "description": "Handles `click` event on the modal container.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedClose",
                "description": "Handles user-initiated close request of this tearsheet.",
                "value": {}
              },
              { "name": "_handleSlugChange", "value": {} },
              {
                "name": "ariaLabel",
                "description": "Optional aria label for the tearsheet",
                "value": { "type": "string" }
              },
              {
                "name": "closeIconDescription",
                "description": "Sets the close button icon description",
                "value": { "type": "string" }
              },
              {
                "name": "hasCloseIcon",
                "description": "Enable a close icon ('x') in the header area of the tearsheet. By default,\n(when this prop is omitted, or undefined or null) a tearsheet does not\ndisplay a close icon if there are navigation actions (\"transactional\ntearsheet\") and displays one if there are no navigation actions (\"passive\ntearsheet\"), and that behavior can be overridden if required by setting\nthis prop to either true or false.",
                "value": { "type": "boolean" }
              },
              {
                "name": "influencerPlacement",
                "description": "The placement of the influencer section, 'left' or 'right'.",
                "value": {}
              },
              {
                "name": "influencerWidth",
                "description": "The width of the influencer section, 'narrow' or 'wide'.",
                "value": {}
              },
              {
                "name": "open",
                "description": "`true` if the tearsheet should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "preventCloseOnClickOutside",
                "description": "Prevent closing on click outside of tearsheet",
                "value": { "type": "boolean" }
              },
              {
                "name": "selectorInitialFocus",
                "description": "The initial location of focus in the side panel",
                "value": {}
              },
              {
                "name": "width",
                "description": "The width of the influencer section, 'narrow' or 'wide'.",
                "value": {}
              },
              { "name": "_checkUpdateActionSizes", "value": {} },
              { "name": "_maxActions", "value": { "type": "number" } },
              { "name": "_handleActionsChange", "value": {} },
              { "name": "_stackDepth", "value": { "type": "number" } },
              { "name": "_stackPosition", "value": { "type": "number" } },
              { "name": "_topOfStack", "value": {} },
              { "name": "_stack", "value": { "type": "StackState" } },
              { "name": "_notifyStack", "value": {} },
              {
                "name": "_handleStackChange",
                "value": { "type": "StackHandler" }
              },
              { "name": "_updateStack", "value": {} },
              { "name": "actionsMultiple", "value": {} },
              { "name": "render", "value": {} },
              { "name": "_checkSetOpen", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "_delay", "value": {} },
              {
                "name": "selectorCloseButton",
                "description": "A selector selecting buttons that should close this modal.",
                "value": {}
              },
              {
                "name": "selectorTabbable",
                "description": "A selector selecting tabbable nodes.",
                "value": {}
              },
              {
                "name": "eventBeforeClose",
                "description": "The name of the custom event fired before this tearsheet is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this tearsheet.",
                "value": {}
              },
              {
                "name": "eventClose",
                "description": "The name of the custom event fired after this tearsheet is closed upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventNavigateBack",
                "description": "The name of the custom event fired on clicking the navigate back button",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              {},
              {
                "name": "cds-tearsheet-beingclosed",
                "description": "The custom event fired before this tearsheet is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this tearsheet."
              },
              {
                "name": "cds-tearsheet-closed",
                "description": "The custom event fired after this tearsheet is closed upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-text-input",
          "description": "Text Input element. Supports all the usual attributes for textual input types\n---\n\n\n### **Events:**\n - **invalid** - undefined\n\n### **Methods:**\n \n\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n\n- **checkValidity(): __** - Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.\n- **setCustomValidity(validityMessage: _string_)** - Sets the given custom validity message.\n\n### **Slots:**\n - **helper-text** - The helper text.\n- **label-text** - The label text.\n- **validity-message** - The validity message. If present and non-empty, this input shows the UI of its invalid state.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "helper-text", "description": "The helper text." },
            { "name": "label-text", "description": "The label text." },
            {
              "name": "validity-message",
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state."
            }
          ],
          "events": [{ "name": "invalid" }],
          "js": {
            "properties": [
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_input",
                "description": "The underlying input element",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "_value",
                "description": "The internal value.",
                "value": { "type": "string" }
              },
              {
                "name": "_handleInput",
                "description": "Handles `oninput` event on the `<input>`.",
                "value": {}
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "autocomplete",
                "description": "May be any of the standard HTML autocomplete options",
                "value": { "type": "string" }
              },
              {
                "name": "autofocus",
                "description": "Sets the input to be focussed automatically on page load. Defaults to false",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Controls the disabled state of the input",
                "value": { "type": "boolean" }
              },
              {
                "name": "enableCounter",
                "description": "Specify whether to display the character counter",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": { "type": "string" }
              },
              {
                "name": "invalid",
                "description": "Specify if the currently value is invalid.",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "maxCount",
                "description": "Max character count allowed for input. This is needed in order for enableCounter to display",
                "value": {}
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether you want the underlying label to be visually hidden",
                "value": { "type": "boolean" }
              },
              {
                "name": "label",
                "description": "Generic label that will be used as the textual representation of what this field is for",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "Name for the input in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "pattern",
                "description": "Pattern to validate the input against for HTML validity checking",
                "value": { "type": "string" }
              },
              {
                "name": "placeholder",
                "description": "Value to display when the input has an empty `value`",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Specify if the component should be read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Boolean property to set the required status",
                "value": { "type": "boolean" }
              },
              {
                "name": "requiredValidityMessage",
                "description": "The special validity message for `required`.",
                "value": { "type": "string" }
              },
              {
                "name": "hidePasswordLabel",
                "description": "\"Hide password\" tooltip text on password visibility toggle",
                "value": { "type": "string" }
              },
              {
                "name": "showPasswordLabel",
                "description": "\"Show password\" tooltip text on password visibility toggle",
                "value": { "type": "string" }
              },
              {
                "name": "showPasswordVisibilityToggle",
                "description": "Boolean property to render password visibility toggle",
                "value": { "type": "boolean" }
              },
              {
                "name": "size",
                "description": "The input box size.",
                "value": {}
              },
              {
                "name": "inline",
                "description": "true to use the inline version.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipDirection",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "type",
                "description": "The type of the input. Can be one of the types listed in the INPUT_TYPE enum",
                "value": {}
              },
              {
                "name": "validityMessage",
                "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value of the input.",
                "value": { "type": "string" }
              },
              {
                "name": "handleTogglePasswordVisibility",
                "description": "Handles password visibility toggle button click",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              { "name": "_getValidityMessage", "value": {} },
              {
                "name": "_testValidity",
                "description": "Checks if the value meets the constraints.",
                "value": {}
              },
              {
                "name": "checkValidity",
                "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets the given custom validity message.",
                "value": {}
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              }
            ],
            "events": [{ "name": "invalid" }]
          }
        },
        {
          "name": "cds-textarea",
          "description": "Text area.\n---\n\n\n### **Events:**\n - **invalid** - undefined\n\n### **Methods:**\n \n\n- **checkValidity(): __** - Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.\n- **setCustomValidity(validityMessage: _string_)** - Sets the given custom validity message.\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n\n\n### **Slots:**\n - **helper-text** - The helper text.\n- **label-text** - The label text.\n- **validity-message** - The validity message. If present and non-empty, this input shows the UI of its invalid state.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "helper-text", "description": "The helper text." },
            { "name": "label-text", "description": "The label text." },
            {
              "name": "validity-message",
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state."
            }
          ],
          "events": [{ "name": "invalid" }],
          "js": {
            "properties": [
              {
                "name": "_handleInput",
                "description": "Handles `oninput` event on the `<input>`.",
                "value": {}
              },
              {
                "name": "cols",
                "description": "The number of columns for the stextarea to show by default",
                "value": {}
              },
              {
                "name": "id",
                "description": "ID to link the `label` and `textarea`",
                "value": { "type": "string" }
              },
              {
                "name": "pattern",
                "description": "Pattern to validate the textarea against for HTML validity checking",
                "value": { "type": "string" }
              },
              {
                "name": "required",
                "description": "Boolean property to set the required status",
                "value": { "type": "boolean" }
              },
              {
                "name": "rows",
                "description": "The number of rows for the textarea to show by default",
                "value": { "type": "number" }
              },
              {
                "name": "_textarea",
                "description": "Get a reference to the underlying textarea so we can directly apply values.\nThis lets us fixe a bug where after a user would clear text, the value wouldn't update programmatically",
                "value": { "type": "HTMLTextAreaElement" }
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              { "name": "_getValidityMessage", "value": {} },
              {
                "name": "_testValidity",
                "description": "Checks if the value meets the constraints.",
                "value": {}
              },
              {
                "name": "invalid",
                "description": "`true` to show the UI of the invalid state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "requiredValidityMessage",
                "description": "The special validity message for `required`.",
                "value": { "type": "string" }
              },
              {
                "name": "validityMessage",
                "description": "The validity message.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              {
                "name": "checkValidity",
                "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets the given custom validity message.",
                "value": {}
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_input",
                "description": "The underlying input element",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "_value",
                "description": "The internal value.",
                "value": { "type": "string" }
              },
              {
                "name": "autocomplete",
                "description": "May be any of the standard HTML autocomplete options",
                "value": { "type": "string" }
              },
              {
                "name": "autofocus",
                "description": "Sets the input to be focussed automatically on page load. Defaults to false",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Controls the disabled state of the input",
                "value": { "type": "boolean" }
              },
              {
                "name": "enableCounter",
                "description": "Specify whether to display the character counter",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": { "type": "string" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "maxCount",
                "description": "Max character count allowed for input. This is needed in order for enableCounter to display",
                "value": {}
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether you want the underlying label to be visually hidden",
                "value": { "type": "boolean" }
              },
              {
                "name": "label",
                "description": "Generic label that will be used as the textual representation of what this field is for",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "Name for the input in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "placeholder",
                "description": "Value to display when the input has an empty `value`",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Specify if the component should be read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "hidePasswordLabel",
                "description": "\"Hide password\" tooltip text on password visibility toggle",
                "value": { "type": "string" }
              },
              {
                "name": "showPasswordLabel",
                "description": "\"Show password\" tooltip text on password visibility toggle",
                "value": { "type": "string" }
              },
              {
                "name": "showPasswordVisibilityToggle",
                "description": "Boolean property to render password visibility toggle",
                "value": { "type": "boolean" }
              },
              {
                "name": "size",
                "description": "The input box size.",
                "value": {}
              },
              {
                "name": "inline",
                "description": "true to use the inline version.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipDirection",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "type",
                "description": "The type of the input. Can be one of the types listed in the INPUT_TYPE enum",
                "value": {}
              },
              {
                "name": "handleTogglePasswordVisibility",
                "description": "Handles password visibility toggle button click",
                "value": {}
              },
              { "name": "updated", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              }
            ],
            "events": [{ "name": "invalid" }]
          }
        },
        {
          "name": "cds-clickable-tile",
          "description": "Clickable tile.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n\n\n### **CSS Parts:**\n - **link** - The link.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_classes",
                "description": "The CSS class list for the link node.",
                "value": {}
              },
              {
                "name": "colorScheme",
                "description": "The color scheme.",
                "value": {}
              },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasRoundedCorners",
                "description": "Specify if the `ClickableTile` component should be rendered with rounded corners.\nOnly valid when `slug` prop is present",
                "value": { "type": "boolean" }
              },
              { "name": "slug", "value": { "type": "boolean" } },
              { "name": "_renderInner", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_linkNode",
                "value": {
                  "type": "HTMLAnchorElement | HTMLParagraphElement | undefined"
                }
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on the `<a>`.",
                "value": {}
              },
              { "name": "_renderDisabledLink", "value": {} },
              { "name": "_renderLink", "value": {} },
              {
                "name": "disabled",
                "description": "`true` if the link should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name.",
                "value": { "type": "string" }
              },
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to.",
                "value": { "type": "string" }
              },
              {
                "name": "inline",
                "description": "`true` if the link should be inline.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Link size.",
                "value": { "type": "LINK_SIZE_TYPE" }
              },
              {
                "name": "target",
                "description": "The link target.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "MIME type of the `target`.",
                "value": { "type": "string" }
              },
              {
                "name": "visited",
                "description": "`true` if the link has been visited.",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": []
          }
        },
        {
          "name": "cds-expandable-tile",
          "description": "Expandable tile.\n---\n\n\n### **Events:**\n - **cds-expandable-tile-beingtoggled** - The custom event fired before the expanded state is changed upon a user gesture. Cancellation of this event stops changing the user-initiated change in expanded state.\n- **cds-expandable-tile-toggled** - The custom event fired after a the expanded state is changed upon a user gesture.\n\n### **Methods:**\n \n- **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-expandable-tile-beingtoggled",
              "description": "The custom event fired before the expanded state is changed upon a user gesture. Cancellation of this event stops changing the user-initiated change in expanded state."
            },
            {
              "name": "cds-expandable-tile-toggled",
              "description": "The custom event fired after a the expanded state is changed upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_belowTheContentHeight",
                "description": "The computed height of the below-the-fold content.",
                "value": { "type": "number" }
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_handleSlotChangeBelowTheFoldContent",
                "description": "Handles `slotchange` event on the below-the-fold content.",
                "value": {}
              },
              { "name": "_handleExpand", "value": {} },
              { "name": "_handleClick", "value": {} },
              {
                "name": "colorScheme",
                "description": "The color scheme.",
                "value": {}
              },
              {
                "name": "expanded",
                "description": "`true` to expand this expandable tile.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hasRoundedCorners",
                "description": "Specify if the `ExpandableTile` component should be rendered with rounded corners.\nOnly valid when `slug` prop is present",
                "value": { "type": "boolean" }
              },
              {
                "name": "withInteractive",
                "description": "`true` to expand this expandable tile.",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              {
                "name": "eventBeforeToggle",
                "description": "The name of the custom event fired before the expanded state is changed upon a user gesture.\nCancellation of this event stops changing the user-initiated change in expanded state.",
                "value": {}
              },
              {
                "name": "eventToggle",
                "description": "The name of the custom event fired after a the expanded state is changed upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "cds-expandable-tile-beingtoggled",
                "description": "The custom event fired before the expanded state is changed upon a user gesture. Cancellation of this event stops changing the user-initiated change in expanded state."
              },
              {
                "name": "cds-expandable-tile-toggled",
                "description": "The custom event fired after a the expanded state is changed upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-radio-tile",
          "description": "Single-selectable tile.\n---\n\n\n### **Events:**\n - **eventRadioChange** - undefined\n- **cds-radio-tile-selected** - The name of the custom event fired after this selectable tile changes its selected state.\n\n### **Methods:**\n ",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "eventRadioChange" },
            {
              "name": "cds-radio-tile-selected",
              "description": "The name of the custom event fired after this selectable tile changes its selected state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_inputType",
                "description": "The `type` attribute of the `<input>`.",
                "value": { "type": "string" }
              },
              {
                "name": "_handleChange",
                "description": "Handles `change` event on the `<input>` in the shadow DOM.",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "eventRadioChange",
                "description": "The name of the custom event fired after this selectable tile changes its selected state.",
                "value": {}
              }
            ],
            "events": [
              { "name": "eventRadioChange" },
              {
                "name": "cds-radio-tile-selected",
                "description": "The name of the custom event fired after this selectable tile changes its selected state."
              }
            ]
          }
        },
        {
          "name": "cds-selectable-tile",
          "description": "Multi-selectable tile.\n---\n\n\n### **Events:**\n - **eventChange** - undefined\n- **cds-selectable-tile-changed** - The custom event fired after this selectable tile changes its selected state.\n\n### **Methods:**\n \n\n\n- **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "eventChange" },
            {
              "name": "cds-selectable-tile-changed",
              "description": "The custom event fired after this selectable tile changes its selected state."
            }
          ],
          "js": {
            "properties": [
              { "name": "_inputNode", "value": { "type": "HTMLInputElement" } },
              {
                "name": "_inputType",
                "description": "The `type` attribute of the `<input>`.",
                "value": { "type": "string" }
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_handleChange",
                "description": "Handles `change` event on the `<input>` in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_renderIcon",
                "description": "Handles the rendering of the icon.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Listener function for keyboard interaction.",
                "value": {}
              },
              {
                "name": "checkmarkLabel",
                "description": "The a11y text for the checkmark icon of the selected state.",
                "value": { "type": "string" }
              },
              {
                "name": "colorScheme",
                "description": "The color scheme.",
                "value": {}
              },
              {
                "name": "hasRoundedCorners",
                "description": "Specify if the `SeletableTile` component should be rendered with rounded corners.\nOnly valid when `slug` prop is present",
                "value": { "type": "boolean" }
              },
              {
                "name": "name",
                "description": "The form name.",
                "value": { "type": "string" }
              },
              {
                "name": "selected",
                "description": "`true` to show the selected state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "value",
                "description": "The form value.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired after this selectable tile changes its selected state.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              { "name": "eventChange" },
              {
                "name": "cds-selectable-tile-changed",
                "description": "The custom event fired after this selectable tile changes its selected state."
              }
            ]
          }
        },
        {
          "name": "cds-tile-group",
          "description": "Tile group.\n---\n\n\n### **Events:**\n - **eventCurrentRadioTileSelection** - undefined\n- **eventCurrentSelectableTilesSelection** - undefined\n- **cds-current-radio-tile-selection** - The name of the custom event fired after a radio tile changes its selected state.\n- **cds-current-selectable-tile-selections** - The name of the custom event fired after a selectable tile changes its selected state.",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "eventCurrentRadioTileSelection" },
            { "name": "eventCurrentSelectableTilesSelection" },
            {
              "name": "cds-current-radio-tile-selection",
              "description": "The name of the custom event fired after a radio tile changes its selected state."
            },
            {
              "name": "cds-current-selectable-tile-selections",
              "description": "The name of the custom event fired after a selectable tile changes its selected state."
            }
          ],
          "js": {
            "properties": [
              { "name": "_handleRadioClick", "value": {} },
              { "name": "_handleSelectableClick", "value": {} },
              {
                "name": "_handleTileSelect",
                "description": "Click listener to ensure selectability.",
                "value": {}
              },
              {
                "name": "_handleKeydownRadio",
                "description": "Handle keyboard navigation for radio tiles",
                "value": {}
              },
              {
                "name": "_handleKeydownSelectable",
                "description": "Handle keyboard navigation for selectable tiles",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Keyboard listener to ensure keyboard navigation.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Focus listener to focus on selected element upon focusing",
                "value": {}
              },
              {
                "name": "fieldsetClassName",
                "description": "Provide an optional className to be applied to the component",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "Specify whether the group is disabled",
                "value": {}
              },
              { "name": "currentRadioSelection", "value": {} },
              { "name": "currentSelections", "value": {} },
              { "name": "radioTiles", "value": {} },
              { "name": "selectableTiles", "value": {} },
              { "name": "firstUpdated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorRadioTile",
                "description": "A selector that selects a radio tile component.",
                "value": {}
              },
              {
                "name": "selectorSelectableTile",
                "description": "A selector that selects a selectable tile component.",
                "value": {}
              },
              {
                "name": "eventCurrentRadioTileSelection",
                "description": "The name of the custom event fired after a radio tile changes its selected state.",
                "value": {}
              },
              {
                "name": "eventCurrentSelectableTilesSelection",
                "description": "The name of the custom event fired after a radio tile changes its selected state.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              { "name": "eventCurrentRadioTileSelection" },
              { "name": "eventCurrentSelectableTilesSelection" },
              {
                "name": "cds-current-radio-tile-selection",
                "description": "The name of the custom event fired after a radio tile changes its selected state."
              },
              {
                "name": "cds-current-selectable-tile-selections",
                "description": "The name of the custom event fired after a selectable tile changes its selected state."
              }
            ]
          }
        },
        {
          "name": "cds-tile",
          "description": "Basic tile.\n---\n\n\n### **Methods:**\n ",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "colorScheme",
                "description": "The color scheme.",
                "value": {}
              },
              {
                "name": "hasRoundedCorners",
                "description": "Specify if the `Tile` component should be rendered with rounded corners.\nOnly valid when `slug` prop is present",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-toggle",
          "description": "Basic toggle.\n---\n\n\n### **Events:**\n - **eventChange** - undefined\n- **cds-toggle-changed** - The custom event fired after this changebox changes its checked state.\n- **cds-checkbox-changed** - The custom event fired after this changebox changes its checked state.\n\n### **Methods:**\n \n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n\n\n### **Slots:**\n - **label-text** - The label text.\n- **checked-text** - The text for the checked state.\n- **unchecked-text** - The text for the unchecked state.\n\n### **CSS Parts:**\n - **input** - The checkbox.\n- **label** - The label.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "label-text", "description": "The label text." },
            {
              "name": "checked-text",
              "description": "The text for the checked state."
            },
            {
              "name": "unchecked-text",
              "description": "The text for the unchecked state."
            }
          ],
          "events": [
            { "name": "eventChange" },
            {
              "name": "cds-toggle-changed",
              "description": "The custom event fired after this changebox changes its checked state."
            },
            {
              "name": "cds-checkbox-changed",
              "description": "The custom event fired after this changebox changes its checked state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_checkboxNode",
                "value": { "type": "HTMLInputElement" }
              },
              {
                "name": "_handleChange",
                "description": "Handles `click` event on the `<button>` in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on the toggle button.",
                "value": {}
              },
              { "name": "_renderCheckmark", "value": {} },
              {
                "name": "labelA",
                "description": "The text for the checked state.",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Hide label text.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readOnly",
                "description": "Read only boolean.",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "Toggle size.", "value": {} },
              {
                "name": "labelB",
                "description": "The text for the unchecked state.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              {
                "name": "eventChange",
                "description": "The name of the custom event fired after this changebox changes its checked state.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "_handleClick",
                "description": "Prevent checkbox state from updating when readonly",
                "value": {}
              },
              {
                "name": "checked",
                "description": "Specify whether the underlying input should be checked",
                "value": { "type": "boolean" }
              },
              {
                "name": "dataTable",
                "description": "Specify if checkbox is being used in a data table",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Specify whether the Checkbox should be disabled",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "Provide text for the form group for additional help",
                "value": {}
              },
              {
                "name": "hideCheckbox",
                "description": "Specify whether the checkbox should be present in the DOM,\nbut invisible and uninteractable. Used for data-table purposes.",
                "value": { "type": "boolean" }
              },
              {
                "name": "indeterminate",
                "description": "Specify whether the Checkbox is in an indeterminate state",
                "value": { "type": "boolean" }
              },
              {
                "name": "labelText",
                "description": "Provide a label to provide a description of the Checkbox input that you are\nexposing to the user",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "The form name.",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Specify whether the Checkbox is read-only",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalid",
                "description": "Specify whether the Checkbox is currently invalid",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Provide the text that is displayed when the Checkbox is in an invalid state",
                "value": {}
              },
              {
                "name": "title",
                "description": "Specify a title for the node for the Checkbox",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              {
                "name": "warn",
                "description": "Specify whether the Checkbox is in a warn state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the Checkbox is in a warn state",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              { "name": "updated", "value": {} },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } }
            ],
            "events": [
              { "name": "eventChange" },
              {
                "name": "cds-toggle-changed",
                "description": "The custom event fired after this changebox changes its checked state."
              },
              {
                "name": "cds-checkbox-changed",
                "description": "The custom event fired after this changebox changes its checked state."
              }
            ]
          }
        },
        {
          "name": "cds-toggletip",
          "description": "Definition tooltip.\n---\n\n\n### **Methods:**\n \n- **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "popoverController",
                "description": "Create popover controller instance",
                "value": {}
              },
              {
                "name": "alignment",
                "description": "How the tooltip is aligned to the trigger button.",
                "value": {}
              },
              {
                "name": "autoalign",
                "description": "Specify whether a auto align functionality should be applied",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "Set whether toggletip is open",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleActionsSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleClick", "value": {} },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocusOut",
                "description": "Handles `blur` event handler on the document this element is in.",
                "value": {}
              },
              { "name": "_renderToggleTipLabel", "value": {} },
              { "name": "_renderTooltipButton", "value": {} },
              { "name": "_renderTooltipContent", "value": {} },
              { "name": "_renderInnerContent", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorToggletipContent",
                "description": "A selector that will return the toggletip content.",
                "value": {}
              },
              {
                "name": "selectorToggletipCaret",
                "description": "A selector that will return the toggletip caret.",
                "value": {}
              },
              {
                "name": "selectorToggletipButton",
                "description": "A selector that will return the trigger element.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-tooltip",
          "description": "Trigger button of tooltip.\n---\n\n\n### **Methods:**\n ",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "align",
                "description": "Specify how the trigger should align with the tooltip",
                "value": { "type": "string" }
              },
              {
                "name": "autoalign",
                "description": "Specify whether a auto align functionality should be applied",
                "value": { "type": "boolean" }
              },
              {
                "name": "dataTable",
                "description": "`true` if this tooltip is in a data table row",
                "value": { "type": "boolean" }
              },
              {
                "name": "closeOnActivation",
                "description": "Specify whether the tooltip should be closed when clicked",
                "value": { "type": "boolean" }
              },
              {
                "name": "defaultOpen",
                "description": "Specify whether the tooltip should be open when it first renders",
                "value": { "type": "boolean" }
              },
              {
                "name": "enterDelayMs",
                "description": "Specify the duration in milliseconds to delay before displaying the tooltip",
                "value": { "type": "number" }
              },
              {
                "name": "leaveDelayMs",
                "description": "Specify the duration in milliseconds to delay before hiding the tooltip",
                "value": { "type": "number" }
              },
              {
                "name": "size",
                "description": "Specify the size of the tooltip",
                "value": { "type": "boolean" }
              },
              {
                "name": "timeoutId",
                "description": "Specify the timeout reference for the tooltip",
                "value": { "type": "number" }
              },
              {
                "name": "toolbarAction",
                "description": "Specify whether the tooltip should be open when it first renders",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleHover",
                "description": "Handles `mouseover` event on this element.",
                "value": {}
              },
              {
                "name": "_handleHoverOut",
                "description": "Handles `mouseleave` event on this element.",
                "value": {}
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event on this element.",
                "value": {}
              },
              {
                "name": "_handleKeydown",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "updated", "value": {} },
              {
                "name": "selectorTooltipContent",
                "description": "A selector that will return the CDSTooltipContent.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "popoverController",
                "description": "Create popover controller instance",
                "value": {}
              },
              {
                "name": "_triggerSlotNode",
                "description": "The `<slot>` element in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "_contentSlotNode",
                "description": "The `<slot>` element in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "caret",
                "description": "Specify whether a caret should be rendered",
                "value": { "type": "boolean" }
              },
              {
                "name": "dropShadow",
                "description": "Specify whether a dropShadow should be rendered",
                "value": { "type": "boolean" }
              },
              {
                "name": "highContrast",
                "description": "Render the component using the high-contrast variant",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "Specify whether the component is currently open or closed",
                "value": { "type": "boolean" }
              },
              {
                "name": "tabTip",
                "description": "Render the component using the tab tip variant",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              {
                "name": "selectorPopoverContentClass",
                "description": "A selector that will return popover content element within\nCDSPopoverContent's shadowRoot.",
                "value": {}
              },
              {
                "name": "selectorPopoverCaret",
                "description": "A selector that will return popover caret element within\nCDSPopoverContent's shadowRoot.",
                "value": {}
              },
              {
                "name": "selectorPopoverContent",
                "description": "A selector that will return the CDSPopoverContent.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header-global-action",
          "description": "Header global action button\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_buttonNode",
                "value": { "type": "HTMLButtonElement" }
              },
              {
                "name": "active",
                "description": "Specify whether the action is currently active",
                "value": {}
              },
              {
                "name": "panelId",
                "description": "Specify which header panel the button is associated with.",
                "value": {}
              },
              {
                "name": "buttonLabelActive",
                "description": "The `aria-label` attribute for the button in its active state.",
                "value": {}
              },
              {
                "name": "buttonLabelInactive",
                "description": "The `aria-label` attribute for the button in its inactive state.",
                "value": {}
              },
              { "name": "_handleClick", "value": {} },
              { "name": "updated", "value": {} },
              { "name": "shouldUpdate", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasIcon",
                "description": "`true` if there is an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              { "name": "_handleDisabledClick", "value": {} },
              { "name": "_handleOver", "value": {} },
              {
                "name": "_handleHoverOut",
                "description": "Handles `keydown` event on this element.",
                "value": {}
              },
              {
                "name": "_handleFocus",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "_handleFocusout",
                "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
                "value": {}
              },
              {
                "name": "autofocus",
                "description": "`true` if the button should have input focus when the page loads.",
                "value": { "type": "boolean" }
              },
              {
                "name": "batchAction",
                "description": "`true` if the button is being used within a data table batch action toolbar",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonClassName",
                "description": "Specify an optional className to be added to your Button",
                "value": {}
              },
              {
                "name": "dangerDescriptor",
                "description": "Specify the message read by screen readers for the danger button variant",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "download",
                "description": "The default file name, used if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hasMainContent",
                "description": "`true` if there is a non-icon content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`. If present, this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "hreflang",
                "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "isExpressive",
                "description": "`true` if expressive theme enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isSelected",
                "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
                "value": { "type": "boolean" }
              },
              { "name": "kind", "description": "Button kind.", "value": {} },
              {
                "name": "linkRole",
                "description": "The a11y role for `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "openTooltip",
                "description": "Boolean to determine if tooltip is open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ping",
                "description": "URLs to ping, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Button size.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target, if this button is rendered as `<a>`.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltipAlignment",
                "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
                "value": {}
              },
              {
                "name": "tooltipPosition",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": {}
              },
              {
                "name": "tooltipText",
                "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
                "value": { "type": "string" }
              },
              { "name": "type", "description": "Button type.", "value": {} },
              { "name": "render", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header-menu-button",
          "description": "The trigger button for side nav in header nav.\n---\n\n\n### **Events:**\n - **undefined** - undefined\n- **cds-header-menu-button-toggled** - The custom event fired after this header menu button is toggled upon a user gesture.\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **button** - The button.\n- **toggle-icon** - The toggle icon.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {},
            {
              "name": "cds-header-menu-button-toggled",
              "description": "The custom event fired after this header menu button is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              { "name": "_handleClick", "value": {} },
              {
                "name": "active",
                "description": "`true` if the button should represent its active state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "buttonLabelActive",
                "description": "The `aria-label` attribute for the button in its active state.",
                "value": { "type": "string" }
              },
              {
                "name": "buttonLabelInactive",
                "description": "The `aria-label` attribute for the button in its inactive state.",
                "value": { "type": "string" }
              },
              {
                "name": "collapseMode",
                "description": "Collapse mode of the side nav.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if the button should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isNotChildOfHeader",
                "description": "If `true` will style the side nav to sit below the header",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              {
                "name": "eventToggle",
                "description": "The name of the custom event fired after this header menu button is toggled upon a user gesture.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              {},
              {
                "name": "cds-header-menu-button-toggled",
                "description": "The custom event fired after this header menu button is toggled upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-header-menu-item",
          "description": "Header submenu item.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **link** - The link.\n- **title** - The title.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target.",
                "value": { "type": "string" }
              },
              {
                "name": "title",
                "description": "The title.",
                "value": { "type": "string" }
              },
              {
                "name": "isActive",
                "description": "Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ariaCurrent",
                "description": "indicates that this element represents the current item",
                "value": {}
              },
              {
                "name": "role",
                "description": "As child of <ul>, this element must have role of listitem",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header-menu",
          "description": "Header menu.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **trigger** - The trigger button.\n- **trigger-icon** - The trigger button icon.\n- **menu-body** - The menu body.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_topMenuItem",
                "description": "The trigger button.",
                "value": { "type": "HTMLElement" }
              },
              {
                "name": "_hasActiveChildren",
                "description": "keeps track if header menu has any active submenus",
                "value": { "type": "boolean" }
              },
              {
                "name": "_handleClick",
                "description": "Handles `click` event handler on this element.",
                "value": {}
              },
              {
                "name": "_handleKeydownTrigger",
                "description": "Handler for the `keydown` event on the trigger button.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggling the open state.",
                "value": {}
              },
              {
                "name": "_handleBlur",
                "description": "Handles `blur` event handler on this element.",
                "value": {}
              },
              {
                "name": "expanded",
                "description": "`true` if the menu should be expanded.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isActive",
                "description": "Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.",
                "value": { "type": "boolean" }
              },
              {
                "name": "triggerContent",
                "description": "The content of the trigger button.",
                "value": { "type": "string" }
              },
              {
                "name": "menuLabel",
                "description": "The `aria-label` attribute for the menu UI.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorItem",
                "description": "A selector that will return the menu items.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header-name",
          "description": "The product name UI in header nav.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **link** - The link.\n- **prefix** - The prefix content.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "prefix",
                "description": "The product name prefix.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header-nav-item",
          "description": "Header nav item.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **link** - The link.\n- **title** - The title.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target.",
                "value": { "type": "string" }
              },
              {
                "name": "title",
                "description": "The title.",
                "value": { "type": "string" }
              },
              {
                "name": "isActive",
                "description": "Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.",
                "value": { "type": "boolean" }
              },
              {
                "name": "ariaCurrent",
                "description": "indicates that this element represents the current item",
                "value": {}
              },
              {
                "name": "role",
                "description": "As child of <ul>, this element must have role of listitem",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header-nav",
          "description": "Header.\n---\n\n\n### **CSS Parts:**\n - **menu-body** - The menu body.\n- **divider** - The divider.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "menuBarLabel",
                "description": "The `aria-label` attribute for the menu bar UI.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header-panel",
          "description": "Header panel\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "expanded",
                "description": "Specify whether the panel is expanded",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header-side-nav-items",
          "description": "Header Side Nav Items section\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "hasDivider",
                "description": "Optionally specify if container will have a bottom divider to differentiate\nbetween original sidenav items and header menu items. False by default.",
                "value": { "type": "boolean" }
              },
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-header",
          "description": "Header.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-side-nav-divider",
          "description": "A divider in side nav.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [{ "name": "styles", "value": {} }],
            "events": []
          }
        },
        {
          "name": "cds-side-nav-items",
          "description": "Side nav items.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              { "name": "render", "value": {} },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "cds-side-nav-link",
          "description": "Side nav menu item.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **Slots:**\n - **link** - The link.\n- **title** - The title.\n- **title-icon-container** - The title icon container.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            { "name": "link", "description": "The link." },
            { "name": "title", "description": "The title." },
            {
              "name": "title-icon-container",
              "description": "The title icon container."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "_titleIconContainerNode",
                "description": "The container for the title icon.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_handleSlotChangeTitleIcon",
                "description": "Handles `slotchange` event on the `<slot>` for the title icon.",
                "value": {}
              },
              {
                "name": "active",
                "description": "`true` if the menu item should be active.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "rel",
                "description": "The link type.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "The link target.",
                "value": { "type": "string" }
              },
              {
                "name": "large",
                "description": "Specify if this is a large variation of the side nav link",
                "value": { "type": "boolean" }
              },
              {
                "name": "title",
                "description": "The title.",
                "value": { "type": "string" }
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-side-nav-menu-item",
          "description": "Side nav menu item.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **CSS Parts:**\n - **link** - The link.\n- **title** - The title.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "active",
                "description": "`true` if the menu item should be active.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "title",
                "description": "The title.",
                "value": { "type": "string" }
              },
              { "name": "shouldUpdate", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "selectorMenu",
                "description": "A selector that will return the parent menu.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-side-nav-menu",
          "description": "Side nav menu.\n---\n\n\n### **Events:**\n - **eventBeforeToggle** - undefined\n- **eventToggle** - undefined\n- **cds-side-nav-menu-beingtoggled** - The name of the custom event fired before this side nav menu is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling this side nav menu.\n- **cds-side-nav-menu-toggled** - The name of the custom event fired after this side nav menu is toggled upon a user gesture.\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n### **Slots:**\n - **title-icon** - The icon.\n\n### **CSS Parts:**\n - **expando** - The expando.\n- **expando-icon-container** - The expando icon container.\n- **expando-icon** - The expando icon.\n- **title** - The title.\n- **title-icon-container** - The title icon container.\n- **menu-body** - The menu body.",
          "doc-url": "",
          "attributes": [],
          "slots": [{ "name": "title-icon", "description": "The icon." }],
          "events": [
            { "name": "eventBeforeToggle" },
            { "name": "eventToggle" },
            {
              "name": "cds-side-nav-menu-beingtoggled",
              "description": "The name of the custom event fired before this side nav menu is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling this side nav menu."
            },
            {
              "name": "cds-side-nav-menu-toggled",
              "description": "The name of the custom event fired after this side nav menu is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_hasIcon",
                "description": "`true` if this menu has an icon.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_titleIconContainerNode",
                "description": "The container for the title icon.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggle request of this side nav menu.",
                "value": {}
              },
              {
                "name": "_handleClickExpando",
                "description": "Handler for the `click` event on the expando button.",
                "value": {}
              },
              {
                "name": "_handleSlotChange",
                "description": "Handles `slotchange` event on the non-named `<slot>`.",
                "value": {}
              },
              {
                "name": "_handleSlotChangeTitleIcon",
                "description": "Handles `slotchange` event on the `<slot>` for the title icon.",
                "value": {}
              },
              {
                "name": "active",
                "description": "`true` if the menu has active menu item.",
                "value": { "type": "boolean" }
              },
              {
                "name": "expanded",
                "description": "`true` if the menu should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "large",
                "description": "Specify if this is a large variation of the side nav menu",
                "value": { "type": "boolean" }
              },
              {
                "name": "forceCollapsed",
                "description": "`true` if the menu should be forced collapsed upon side nav's expanded state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "title",
                "description": "The title text.",
                "value": { "type": "string" }
              },
              { "name": "updated", "value": {} },
              { "name": "render", "value": {} },
              {
                "name": "attribItemHasIcon",
                "description": "The attribute name of the menu items, that is set if this menu has an icon.",
                "value": { "type": "string" }
              },
              {
                "name": "selectorItem",
                "description": "A selector that will return the menu items.",
                "value": {}
              },
              {
                "name": "eventBeforeToggle",
                "description": "The name of the custom event fired before this side nav menu is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this side nav menu.",
                "value": {}
              },
              {
                "name": "eventToggle",
                "description": "The name of the custom event fired after this side nav menu is toggled upon a user gesture.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": [
              { "name": "eventBeforeToggle" },
              { "name": "eventToggle" },
              {
                "name": "cds-side-nav-menu-beingtoggled",
                "description": "The name of the custom event fired before this side nav menu is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling this side nav menu."
              },
              {
                "name": "cds-side-nav-menu-toggled",
                "description": "The name of the custom event fired after this side nav menu is toggled upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-side-nav",
          "description": "Side nav.\n---\n\n\n### **Events:**\n - **cds-header-menu-button-toggled** - The name of the custom event fired after the header menu button in the document is toggled upon a user gesture.",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "cds-header-menu-button-toggled",
              "description": "The name of the custom event fired after the header menu button in the document is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "_hovered",
                "description": "`true` if this side nav is hovered.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_hTransition",
                "description": "The handle for `transitionend` event listener.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_transitionPromise",
                "description": "A promise that is resolved when the transition is complete.",
                "value": {}
              },
              {
                "name": "_updateAndTransitionPromise",
                "description": "A promise that is resolved when the transition upon proprety update is complete.",
                "value": {}
              },
              {
                "name": "_cleanHTransition",
                "description": "Cleans the handle for `transitionend` event listener.",
                "value": {}
              },
              {
                "name": "_handleButtonToggle",
                "description": "Handles `${prefix}-header-menu-button-toggle` event on the document.",
                "value": {}
              },
              {
                "name": "_updatedSideNavMenuForceCollapsedState",
                "description": "Force child side nav menus collapsed upon the hover/expanded state of this side nav.",
                "value": {}
              },
              {
                "name": "collapseMode",
                "description": "Collapse mode of the side nav.",
                "value": {}
              },
              {
                "name": "expanded",
                "description": "`true` to expand the side nav.",
                "value": { "type": "boolean" }
              },
              {
                "name": "isNotChildOfHeader",
                "description": "If `true` will style the side nav to sit below the header",
                "value": { "type": "boolean" }
              },
              {
                "name": "isNotPersistent",
                "description": "Specify if the side-nav will be persistent above the lg breakpoint",
                "value": { "type": "boolean" }
              },
              { "name": "shouldUpdate", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "_handleFocusOut",
                "description": "Handles `blur` event handler on this element.",
                "value": {}
              },
              {
                "name": "_handleFocusIn",
                "description": "Handles `focus` event handler on this element.",
                "value": {}
              },
              {
                "name": "_handleNavMouseOver",
                "description": "Handles the `mouseover` event for the side nav in rail mode.",
                "value": {}
              },
              {
                "name": "_handleNavMouseOut",
                "description": "Handles the `mouseout` event for the side nav in rail mode.",
                "value": {}
              },
              {
                "name": "_onOverlayClick",
                "description": "Handles the `click` event for the side nav overlay.",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "selectorButtonToggle",
                "description": "A selector that will return the toggle buttons.",
                "value": {}
              },
              {
                "name": "selectorHeaderItems",
                "description": "A selector that will return the header name + global action elements.",
                "value": {}
              },
              {
                "name": "selectorNavItems",
                "description": "A selector that will return side nav focusable items.",
                "value": {}
              },
              {
                "name": "selectorMenu",
                "description": "A selector that will return side nav menus.",
                "value": {}
              },
              {
                "name": "eventButtonToggle",
                "description": "The name of the custom event fired after the header menu button in the document is toggled upon a user gesture.",
                "value": {}
              },
              { "name": "styles", "value": {} },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              }
            ],
            "events": [
              {
                "name": "cds-header-menu-button-toggled",
                "description": "The name of the custom event fired after the header menu button in the document is toggled upon a user gesture."
              }
            ]
          }
        },
        {
          "name": "cds-switcher-divider",
          "description": "A divider in switcher.\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [{ "name": "styles", "value": {} }],
            "events": []
          }
        },
        {
          "name": "cds-switcher-item",
          "description": "Switcher menu item.\n---\n\n\n### **Methods:**\n - **focus()** - Focuses on the first focusable element in the shadow DOM.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "ariaLabel",
                "description": "Required props for accessibility label",
                "value": {}
              },
              {
                "name": "ariaLabelledBy",
                "description": "Props for accessibility labelled by",
                "value": {}
              },
              {
                "name": "href",
                "description": "Link `href`.",
                "value": { "type": "string" }
              },
              {
                "name": "selected",
                "description": "Specify if this is a large variation of the side nav link",
                "value": { "type": "boolean" }
              },
              {
                "name": "tabIndex",
                "description": "Specify if this is a large variation of the side nav link",
                "value": { "type": "number" }
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "cds-switcher",
          "description": "Switcher\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "ariaLabel",
                "description": "Required props for accessibility label on the underlying menu",
                "value": {}
              },
              {
                "name": "ariaLabelledBy",
                "description": "Prop for accessibility labelled by on the underlying menu",
                "value": {}
              },
              { "name": "render", "value": {} },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} }
            ],
            "events": []
          }
        },
        {
          "name": "my-dropdown",
          "description": "\n---\n\n\n### **Events:**\n - **invalid** - undefined\n- **eventBeforeToggle** - undefined\n- **eventToggle** - undefined\n- **cds-dropdown-beingselected** - The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.\n- **cds-dropdown-beingtoggled** - The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.\n- **cds-dropdown-selected** - The custom event fired after a dropdown item is selected upon a user gesture.\n- **cds-dropdown-toggled** - The custom event fired after the open state of this dropdown is toggled upon a user gesture.\n\n### **Methods:**\n \n- **checkValidity(): __** - Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.\n- **setCustomValidity(validityMessage: _string_)** - Sets the given custom validity message.\n- **_handleFormdata(event: _Event_): _void_** - Handles `formdata` event.\n- **focus()** - Focuses on the first focusable element in the shadow DOM.\n\n\n\n\n\n\n\n\n\n\n\n\n\n### **CSS Parts:**\n - **label-text** - The label text.\n- **helper-text** - The helper text.\n- **trigger-button** - The trigger button.\n- **menu-body** - The menu body.\n- **validity-message** - The validity message.",
          "doc-url": "",
          "attributes": [],
          "events": [
            { "name": "invalid" },
            { "name": "eventBeforeToggle" },
            { "name": "eventToggle" },
            {
              "name": "cds-dropdown-beingselected",
              "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
            },
            {
              "name": "cds-dropdown-beingtoggled",
              "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
            },
            {
              "name": "cds-dropdown-selected",
              "description": "The custom event fired after a dropdown item is selected upon a user gesture."
            },
            {
              "name": "cds-dropdown-toggled",
              "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture."
            }
          ],
          "js": {
            "properties": [
              { "name": "_getValidityMessage", "value": {} },
              {
                "name": "_testValidity",
                "description": "Checks if the value meets the constraints.",
                "value": {}
              },
              {
                "name": "invalid",
                "description": "`true` to show the UI of the invalid state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "`true` if the value is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "requiredValidityMessage",
                "description": "The special validity message for `required`.",
                "value": { "type": "string" }
              },
              {
                "name": "validityMessage",
                "description": "The validity message.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "The value.",
                "value": { "type": "string" }
              },
              {
                "name": "checkValidity",
                "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets the given custom validity message.",
                "value": {}
              },
              {
                "name": "_handles",
                "description": "The list of handles managed by this mix-in.",
                "value": { "type": "Set<Handle>" }
              },
              {
                "name": "_hostListeners",
                "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
                "value": {
                  "type": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
                }
              },
              {
                "name": "_hFormdata",
                "description": "The handle for `formdata` event listener on the containing form.",
                "value": { "type": "Handle | null" }
              },
              {
                "name": "_handleFormdata",
                "description": "Handles `formdata` event.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Focuses on the first focusable element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_hasSlug",
                "description": "`true` if there is a slug.",
                "value": { "type": "boolean" }
              },
              {
                "name": "_activeDescendant",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "_selectedItemContent",
                "description": "The content of the selected item.",
                "value": { "type": "DocumentFragment | null" }
              },
              {
                "name": "_shouldTriggerBeFocusable",
                "description": "`true` if the trigger button should be focusable.\nDerived class can set `false` to this if the trigger button contains another primary focusable element (e.g. `<input>`).",
                "value": { "type": "boolean" }
              },
              {
                "name": "_listBoxNode",
                "description": "The list box `<div>` node.",
                "value": { "type": "HTMLDivElement" }
              },
              {
                "name": "_slotHelperTextNode",
                "description": "The `<slot>` element for the helper text in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              {
                "name": "_slotTitleTextNode",
                "description": "The `<slot>` element for the title text in the shadow DOM.",
                "value": { "type": "HTMLSlotElement" }
              },
              { "name": "_selectionShouldChange", "value": {} },
              {
                "name": "_selectionDidChange",
                "description": "A callback that runs after change in dropdown selection upon user interaction is confirmed.",
                "value": {}
              },
              {
                "name": "_handleClickInner",
                "description": "Handles `click` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleKeydownInner",
                "description": "Handler for the `keydown` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleKeypressInner",
                "description": "Handler for the `keypress` event on the top-level element in the shadow DOM.",
                "value": {}
              },
              {
                "name": "_handleFocusOut",
                "description": "Handles `blur` event handler on the document this element is in.",
                "value": {}
              },
              {
                "name": "_handleSlotchangeHelperText",
                "description": "Handles `slotchange` event for the `<slot>` for helper text.",
                "value": {}
              },
              {
                "name": "_handleSlotchangeLabelText",
                "description": "Handles `slotchange` event for the `<slot>` for label text.",
                "value": {}
              },
              {
                "name": "_handleSlugSlotChange",
                "description": "Handles `slotchange` event.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedSelectItem",
                "description": "Handles user-initiated selection of a dropdown item.",
                "value": {}
              },
              {
                "name": "_handleUserInitiatedToggle",
                "description": "Handles user-initiated toggling the open state.",
                "value": {}
              },
              {
                "name": "_clearHighlight",
                "description": "Clears the selection of dropdown items.",
                "value": {}
              },
              {
                "name": "_navigate",
                "description": "Navigate through dropdown items.",
                "value": {}
              },
              { "name": "_renderPrecedingLabel", "value": {} },
              { "name": "_renderLabel", "value": {} },
              { "name": "_renderTitleLabel", "value": {} },
              { "name": "_renderFollowingLabel", "value": {} },
              {
                "name": "ariaLabel",
                "description": "'aria-label' of the ListBox component.\nSpecify a label to be read by screen readers on the container node",
                "value": { "type": "string" }
              },
              {
                "name": "direction",
                "description": "Specify the direction of the dropdown. Can be either top or bottom.",
                "value": {}
              },
              {
                "name": "disabled",
                "description": "`true` if this dropdown should be disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "helperText",
                "description": "The helper text.",
                "value": { "type": "string" }
              },
              {
                "name": "hideLabel",
                "description": "Specify whether the title text should be hidden or not",
                "value": { "type": "boolean" }
              },
              {
                "name": "invalidText",
                "description": "Message which is displayed if the value is invalid.",
                "value": { "type": "string" }
              },
              {
                "name": "titleText",
                "description": "Provide the title text that will be read by a screen reader when visiting this control",
                "value": { "type": "string" }
              },
              {
                "name": "name",
                "description": "Name for the dropdown in the `FormData`",
                "value": { "type": "string" }
              },
              {
                "name": "open",
                "description": "`true` if this dropdown should be open.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readOnly",
                "description": "Whether or not the Dropdown is readonly",
                "value": { "type": "boolean" }
              },
              { "name": "size", "description": "Dropdown size.", "value": {} },
              {
                "name": "toggleLabelClosed",
                "description": "The `aria-label` attribute for the UI indicating the closed state.",
                "value": { "type": "string" }
              },
              {
                "name": "toggleLabelOpen",
                "description": "The `aria-label` attribute for the UI indicating the open state.",
                "value": { "type": "string" }
              },
              {
                "name": "label",
                "description": "Generic label that will be used as the textual representation of what this field is for",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "`true` if this dropdown should use the inline UI variant.",
                "value": {}
              },
              {
                "name": "warn",
                "description": "Specify whether the control is currently in warning state",
                "value": { "type": "boolean" }
              },
              {
                "name": "warnText",
                "description": "Provide the text that is displayed when the control is in warning state",
                "value": { "type": "string" }
              },
              { "name": "shouldUpdate", "value": {} },
              { "name": "updated", "value": {} },
              {
                "name": "_classes",
                "description": "The CSS class list for dropdown listbox",
                "value": {}
              },
              { "name": "render", "value": {} },
              {
                "name": "TRIGGER_KEYS",
                "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item.",
                "value": {}
              },
              {
                "name": "selectorItemHighlighted",
                "description": "A selector that will return highlighted items.",
                "value": {}
              },
              {
                "name": "selectorItem",
                "description": "A selector that will return dropdown items.",
                "value": {}
              },
              {
                "name": "selectorItemSelected",
                "description": "A selector that will return selected items.",
                "value": {}
              },
              {
                "name": "eventBeforeSelect",
                "description": "The name of the custom event fired before a dropdown item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
                "value": {}
              },
              {
                "name": "eventSelect",
                "description": "The name of the custom event fired after a a dropdown item is selected upon a user gesture.",
                "value": {}
              },
              {
                "name": "eventBeforeToggle",
                "description": "The name of the custom event fired before this dropdown item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this dropdown item.",
                "value": {}
              },
              {
                "name": "eventToggle",
                "description": "The name of the custom event fired after this dropdown item is toggled upon a user gesture.",
                "value": {}
              },
              {
                "name": "slugItem",
                "description": "A selector that will return the slug item.",
                "value": {}
              },
              { "name": "shadowRootOptions", "value": { "type": "object" } },
              { "name": "styles", "value": {} },
              { "name": "getAction", "value": {} }
            ],
            "events": [
              { "name": "invalid" },
              { "name": "eventBeforeToggle" },
              { "name": "eventToggle" },
              {
                "name": "cds-dropdown-beingselected",
                "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection."
              },
              {
                "name": "cds-dropdown-beingtoggled",
                "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling."
              },
              {
                "name": "cds-dropdown-selected",
                "description": "The custom event fired after a dropdown item is selected upon a user gesture."
              },
              {
                "name": "cds-dropdown-toggled",
                "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture."
              }
            ]
          }
        }
      ]
    },
    "css": {
      "properties": [],
      "pseudo-elements": [
        { "name": "part(expando)", "description": "The expando button." },
        { "name": "part(expando-icon)", "description": "The expando icon." },
        { "name": "part(title)", "description": "The title." },
        { "name": "part(content)", "description": "The content." },
        { "name": "part(link)", "description": "The link." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(input)", "description": "The checkbox." },
        { "name": "part(label)", "description": "The label." },
        { "name": "part(input)", "description": "The checkbox." },
        { "name": "part(label)", "description": "The label." },
        { "name": "part(selected-icon)", "description": "The selected icon." },
        { "name": "part(label-text)", "description": "The label text." },
        { "name": "part(helper-text)", "description": "The helper text." },
        {
          "name": "part(trigger-button)",
          "description": "The trigger button."
        },
        { "name": "part(menu-body)", "description": "The menu body." },
        {
          "name": "part(validity-message)",
          "description": "The validity message."
        },
        { "name": "part(button)", "description": "The button." },
        {
          "name": "part(selection-container)",
          "description": "The container of the checkbox."
        },
        { "name": "part(selection)", "description": "The checkbox." },
        {
          "name": "part(selection-container)",
          "description": "The container of the checkbox."
        },
        { "name": "part(selection)", "description": "The checkbox." },
        { "name": "part(search-icon)", "description": "The search icon." },
        { "name": "part(label-text)", "description": "The label text." },
        { "name": "part(input)", "description": "The input box." },
        { "name": "part(close-button)", "description": "The close button." },
        { "name": "part(close-icon)", "description": "The close icon." },
        { "name": "part(selected-icon)", "description": "The selected icon." },
        { "name": "part(label-text)", "description": "The label text." },
        { "name": "part(helper-text)", "description": "The helper text." },
        {
          "name": "part(trigger-button)",
          "description": "The trigger button."
        },
        { "name": "part(menu-body)", "description": "The menu body." },
        {
          "name": "part(validity-message)",
          "description": "The validity message."
        },
        { "name": "part(link)", "description": "The link." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(close-icon)", "description": "The close icon." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(dialog)", "description": "The dialog." },
        { "name": "part(selected-icon)", "description": "The selected icon." },
        { "name": "part(label-text)", "description": "The label text." },
        { "name": "part(helper-text)", "description": "The helper text." },
        {
          "name": "part(trigger-button)",
          "description": "The trigger button."
        },
        { "name": "part(menu-body)", "description": "The menu body." },
        {
          "name": "part(validity-message)",
          "description": "The validity message."
        },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(search-icon)", "description": "The search icon." },
        { "name": "part(label-text)", "description": "The label text." },
        { "name": "part(input)", "description": "The input box." },
        { "name": "part(close-button)", "description": "The close button." },
        { "name": "part(close-icon)", "description": "The close icon." },
        { "name": "part(dialog)", "description": "The dialog." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(dialog)", "description": "The dialog." },
        { "name": "part(link)", "description": "The link." },
        { "name": "part(input)", "description": "The checkbox." },
        { "name": "part(label)", "description": "The label." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(button)", "description": "The button." },
        { "name": "part(toggle-icon)", "description": "The toggle icon." },
        { "name": "part(link)", "description": "The link." },
        { "name": "part(title)", "description": "The title." },
        { "name": "part(trigger)", "description": "The trigger button." },
        {
          "name": "part(trigger-icon)",
          "description": "The trigger button icon."
        },
        { "name": "part(menu-body)", "description": "The menu body." },
        { "name": "part(link)", "description": "The link." },
        { "name": "part(prefix)", "description": "The prefix content." },
        { "name": "part(link)", "description": "The link." },
        { "name": "part(title)", "description": "The title." },
        { "name": "part(menu-body)", "description": "The menu body." },
        { "name": "part(divider)", "description": "The divider." },
        { "name": "part(link)", "description": "The link." },
        { "name": "part(title)", "description": "The title." },
        { "name": "part(expando)", "description": "The expando." },
        {
          "name": "part(expando-icon-container)",
          "description": "The expando icon container."
        },
        { "name": "part(expando-icon)", "description": "The expando icon." },
        { "name": "part(title)", "description": "The title." },
        {
          "name": "part(title-icon-container)",
          "description": "The title icon container."
        },
        { "name": "part(menu-body)", "description": "The menu body." },
        { "name": "part(label-text)", "description": "The label text." },
        { "name": "part(helper-text)", "description": "The helper text." },
        {
          "name": "part(trigger-button)",
          "description": "The trigger button."
        },
        { "name": "part(menu-body)", "description": "The menu body." },
        {
          "name": "part(validity-message)",
          "description": "The validity message."
        }
      ]
    }
  }
}
